package svce.svcepro;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.LabeledIntent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.Toast;

import java.util.ArrayList;

/**
 * Created by harishananth on 17/09/16.
 */
public class ttperiod extends Activity {
    ListView listView;

//even sems for auto dept below

    String[] fautotwomonday = {"1-Programming for problem solving", "2-Applied mechanics", "3-Technical english", "4-Mathematics-II", "5-EVS", "6-Engineering materials", "7-Sem1"};

    String[] fautotwotuesday = {"1-Programming for problem solving lab", "2-Programming for problem solving lab", "3-Programming for problem solving lab", "4-Engineering materials", "5-Mathematics-II", "6-Applied mechanics", "7-Programming for problem solving "};

    String[] fautotwowednesday = {"1-CAD LAB", "2-CAD LAB", "3-CAD LAB", "4-EVS", "5-Technical english", "6-Mathematics-II", "7-Applied mechanics"};

    String[] fautotwothursday = {"1-Mathematics-II", "2-Engineering materials", "3-EVS", "4-SEM2", "5-Programming for problem solving", "6-Mathematics-II", "7-LIB"};

    String[] fautotwofriday = {"1-Applied mechanics", "2-Technical english", "3-SEM3", "4-EVS", "5-Programming for problem solving", "6-Technical english", "7-Applied mechanics"};

//second year auto

    String[] sautotwomonday = {"1-computational methods", "2-Automotive components/Electronics and microcontroller/fluid mechanics lab", "3-Automotive components/Electronics and microcontroller/fluid mechanics lab", "4-Automotive components/Electronics and microcontroller/fluid mechanics lab", "5-Fluid mechanics/mechanics of machine", "6-Electronics and microcontroller", "7-Fluid mechanics/mechanics of machine"};

    String[] sautotwotuesday = {"1-Automotive chassis", "2-Fluid mechanics/mechanics of machine", "3-computational methods", "4-Electronics and microcontroller", "5-Fluid mechanics/mechanics of machine", "6-computational methods", "7-EVS"};

    String[] sautotwowednesday = {"1-EVS", "2-computational methods", "3-Fluid mechanics/mechanics of machine", "4-Automotive chassis", "5-Fluid mechanics/mechanics of machine", "6-Automative chases", "7-Fluid mechanics/mechanics of machine"};

    String[] sautotwothursday = {"1-Fluid mechanics/mechanics of machine", "2-EVS", "3-Electronics and microcontroller", "4-computational methods", "5Automotive components/Electronics and microcontroller/fluid mechanics lab-", "6-Automotive components/Electronics and microcontroller/fluid mechanics lab", "7-Automotive components/Electronics and microcontroller/fluid mechanics lab"};

    String[] sautotwofriday = {"1-Fluid mechanics/mechanics of machine-", "2-Automotive components/Electronics and microcontroller/fluid mechanics lab", "3-Automotive components/Electronics and microcontroller/fluid mechanics lab", "4-Automotive components/Electronics and microcontroller/fluid mechanics lab", "5-Electronics and microcontroller", "6-Fluid mechanics/mechanics of machine", "7-Automotive chasses/EVS"};
    //third year auto
    String[] tautotwomonday = {"1-Interview and career skills lab", "2-Interview and career skills lab", "3-Interview and career skills lab", "4-Interview and career skills lab", "5-PL", "6-Finite element analysis", "7-Automative chassis components design"};
    String[] tautotwotuesday = {"1-Automative air conditioning/alternative fuels and energy system/advance theory of ic engeines", "2-Automative air conditioning", "3-alternative fuels and energy system", "4-Finite element analysis", "5-Automotive pollution and controll", "6-principles of manangement", "7-PL"};
    String[] tautotwowednesday = {"1-Automative air conditioning", "2-principles of manangement", "3-finite element analysys", "4-Automative air conditioning/alternative fuels and energy system/advance theory of ic engeines", "5-finite element analysys", "6-principles of manangement/Automotive pollution and controll", "7-PL"};
    String[] tautotwothursday = {"1-Automative pollution and controll", "2-Computer aided engine and chassis component design lab ", "3-Computer aided engine and chassis component design lab", "4-Computer aided engine and chassis component design lab", "5-Automative air conditioning", "6-Automative air conditioning/alternative fuels and energy system/advance theory of ic engeines", "7-Alternative fuels and energy system"};
    String[] tautotwofriday = {"1-Automative air conditioning", "2-Automotive pollution and controll", "3-Alternative fuels and energy systems", "4-Princliples of manangement", "5-finite element analysys", "6-Finite element analysys", "7-Automative air conditioning/alternative fuels and energy system/advance theory of ic engeines"};

    //fourth year auto
    String[] frautotwomonday = {"1-Vehicle body engineering", "2-Transport management/operations research/total quality manangement", "3-Transport management/operations research/total quality manangement", "4-vehicle body engineering", "5-Transport management/operations research/total quality manangement", "6-vehicle body engineering", "7-Transport management/operations research/total quality manangement"};
    String[] frautotwotuesday = {"1-project work", "2-project work", "3-project work", "4-project work", "5-project work", "6-project work", "7-project work"};
    String[] frautotwowednesday = {"1-project work", "2-project work", "3-project work", "4-project work", "5-project work", "6-project work", "7-project work"};
    String[] frautotwothursday = {"1-project work", "2-project work", "3-project work", "4-project work", "5-project work", "6-project work", "7-project work"};
    String[] frautotwofriday = {"1-project work", "2-project work", "3-project work", "4-project work", "5-project work", "6-project work", "7-project work"};

    // ****odd sem of 1st, 2nd year 3rd and 4th year of automobile


    String[] fautoonemonday = {"1-Basic Electrical and Electronics Engineering", "2-Engineering Physics", "3-Communicative English", "4-Engineering Mathematics - I", "5-Engineering Practices Laboratory", "6Engineering Practices Laboratory", "7-Engineering Practices Laboratory", "8-Sports"};
    String[] fautoonetuesday = {"1-Engineering Drawing", "2-Engineering Drawing", "3-Engineering Drawing", "4-Engineering Mathematics - I", "5-Engineering Chemistry", "6-Engineering Physics", "7-Basic Electrical and Electronics Engineering"};
    String[] fautoonewednesday = {"1-Engineering Mathematics - I", "2-Engineering Chemistry", "3-Communicative English", "4-Basic Electrical and Electronics Engineering", "5-Engineering Drawing", "6-Engineering Drawing", "7-Engineering Drawing"};
    String[] fautoonethursday = {"1-Engineering Chemistry", "2-Seminar I", "3-Engineering Mathematics - I", "4-Engineering Physics", "5-Communicative English ", "6-Physics and Chemistry Laboratory", "7-Physics and Chemistry Laboratory"};
    String[] fautoonefriday = {"1-Basic Electrical and Electronics Engineering", "2-Communicative English", "3-Engineering Physics", "4-Engineering Chemistry", "5-Seminar II", "6-Engineering Mathematics - I", "7-Library"};


    String[] sautoonemonday = {"1-Automotive Engines", "2-Engineering Thermodnamics", "3-Mechanics of Solids", "4-Engineering Materials and Metallurgy / Manufacturing Technology", "5-Mathematics III", "6-Manufacturing Technology", "7-Engineering Materials and Metallurgy"};
    String[] sautoonetuesday = {"1-Engineering Thermodnamics", "2-Engineering Performance and Emission Testing Lab / Strength of Materials Lab", "3-Engineering Performance and Emission Testing Lab / Strength of Materials Lab", "4-Engineering Performance and Emission Testing Lab / Strength of Materials Lab", "5-Manufacturing Technology", "6-Mechanics of Solids", "7-Mathematics III(Tutorial)"};
    String[] sautoonewednesday = {"1-Mechanics of Solids", "2-Engineering Thermodnamics", "3-Mathematics III", "4-Mechanics of Solids(Tutorial)", "5-Manufacturing Technology lab/Engine Performance and Emission Testing lab", "Manufacturing Technology lab/Engine Performance and Emission Testing lab", "Manufacturing Technology lab/Engine Performance and Emission Testing lab"};
    String[] sautoonethursday = {"1-Automotive Engines", "2-Mathematics III", "3-Engineering Materials and Metallurgy", "4-Engineering Thermodnamics(Tutorial)", "5-Strength of Materials lab / Manufacturing Technology Lab", "6-Strength of Materials lab / Manufacturing Technology Lab", "7-Strength of Materials lab / Manufacturing Technology Lab"};
    String[] sautoonefriday = {"1-Mechanics of Solids", "2-Automotive Engines", "3-Engineering Thermodnamics", "4-Manufacturing Technology", "5-Automotive Engines", "6-Mathematics III", "7-Engineering Materials and Metallurgy"};

    //third year auto
    String[] tautoonemonday = {"1-Automotive Transmission", "2-Design of Machine elements", "3-Automotive Fuels and Lubricants", "4-Automotive Electrical and Electronics Systems", "5-Automotive Fuels and Lubricants Lab / Automotive Electrical and Electronics Systems Lab", "6-Automotive Fuels and Lubricants Lab / Automotive Electrical and Electronics Systems Lab", "7-Automotive Fuels and Lubricants Lab / Automotive Electrical and Electronics Systems Lab"};
    String[] tautoonetuesday = {"1-Vehicle Design Data Characteristics", "2-Automotive Transmission", "3-Design of Machine elements", "4-Applied Thermodynamics and Heat Transfer", "5-Automotive Electrical and Electronics Systems Lab / Computer Aided Machine Drawing Lab", "6-Automotive Electrical and Electronics Systems Lab / Computer Aided Machine Drawing Lab", "7-Automotive Electrical and Electronics Systems Lab / Computer Aided Machine Drawing Lab"};
    String[] tautoonewednesday = {"1-Automotive Electrical and Electronics Systems", "2-Automotive Fuels and Lubricants", "3-Applied Thermodynamics and Heat Transfer", "4-Automotive Fuels and Lubricants", "5-Automotive Transmission", "6-Applied Thermodynamics and Heat Transfer", "7-Vehicle Design Data Characteristics(T)"};
    String[] tautoonethursday = {"1-Design of Machine elements", "2-Vehicle Design Data Characteristics", "3-Automotive Transmission", "4-Vehicle Design Data Characteristics", "5-Applied Thermodynamics and Heat Transfer", "6-Automotive Fuels and Lubricants", "7-Automotive Electrical and Electronics Systems"};
    String[] tautoonefriday = {"1-Design of Machine elements", "2-Computer Aided Machine Drawing Lab / Automotive Fuels and Lubricants Lab", "3-Computer Aided Machine Drawing Lab / Automotive Fuels and Lubricants Lab", "4-Computer Aided Machine Drawing Lab / Automotive Fuels and Lubricants Lab", "5-Design of Machine elements(T)", "6-Automotive Electrical and Electronics Systems", "7-Applied Thermodynamics and Heat Transfer(Tutorial)"};

    //fourth year auto
    String[] frautoonemonday = {"1-Automotive Aerodynamics / Automotive Safety", "2-Vehicle Maintenance", "3-Engine and Vehicle Management System", "4-Finite Element Analysis(T)", "5-New Generation and Hybrid Vehicles", "6-Placement(1)", "7-Automotive Aerodynamics / Automotive Safety"};
    String[] frautoonetuesday = {"1-Finite Element Analysis", "2-Vehicle Maintenance", "3-Automotive Pollution and Control", "4-Placement(2)", "5-New Generation and Hybrid Vehicles", "6-Engine and Vehicle Management System", "7-Project Work(1)"};
    String[] frautoonewednesday = {"1-Vehicle Maintenance", "2-Finite Element Analysis", "3-Automotive Aerodynamics / Automotive Safety", "4-New Generation and Hybrid Vehicles", "5-Engine and Vehicle Management System", "6-New Generation and Hybrid Vehicles", "7-Library"};
    String[] frautoonethursday = {"1-Engine Performance and Emission Testing Lab / Vehicle Maintenace Lab", "2-Engine Performance and Emission Testing Lab / Vehicle Maintenace Lab", "3-Engine Performance and Emission Testing Lab / Vehicle Maintenace Lab", "4-Automotive Aerodynamics / Automotive Safety", "5-Engine and Vehicle Management System", "6-Automotive Pollution and Control", "7-Vehicle Maintenance"};
    String[] frautoonefriday = {"1-Engine and Vehicle Management System", "2-Automotive Pollution and Control", "3-New Generation and Hybrid Vehicles", "4-Finite Element Analysis", "5-Vehicle Maintenace Lab / Engine Performance and Emission Testing Lab", "6-Vehicle Maintenace Lab / Engine Performance and Emission Testing Lab", "7-Vehicle Maintenace Lab / Engine Performance and Emission Testing Lab"};


    // even sems for biotech depts below

    //biotech first yr

    String[] fbiotechtwomonday = {"1-Engineering Mathematics II", "2-Environmental Science and Engineering", "3-Basic Civil and Mechanical Engineering", "4-Programming for Problem Solving", "5-Physics of Materials", "6-Interpersonal Skills/Listening and Speaking Lab", "7-Interpersonal Skills/Listening and Speaking Lab"};
    String[] fbiotechtwotuesday = {"Physics of Materials", "2-Engineering Mathematics II", "3-Environmental Science and Engineering", "4-Basic Civil and Mechanical Engineering", "5-Technical English", "6-Advanced Reading and Writing", "7-Advanced Reading and Writing", "8-Sports"};
    String[] fbiotechtwowednesday = {"1-Probability and Statistics", "2-Programming for Problem Solving", "3-Programming for Problem Solving", "4-Basic Civil and Mechanical Engineering", "5-Environmental Science and Engineering", "6-Engineering Mathematics II", "7-Programming for Problem Solving"};
    String[] fbiotechtwothursday = {"1-Technical English", "2-Programming for Problem Solving", "3-Engineering Mathematics II", "4-Seminar 1", "5-Physics of Materials", "6-Library", "7-Basic Civil and Mechanical Engineering"};
    String[] fbiotechtwofriday = {"1-Basic Civil and Mechanical Engineering", "2-Programming for Problem Solving", "3-Technical English", "4-Engineering Mathematics II", "5-Environmental Science and Engineering", "6-Technical English", "7-Seminar 2"};

    //bio_tech 2nd year
    String[] sbiotechtwomonday = {"1-Chemical Engineering Lab/Instrumental Methods of Analysis Lab", "2-Chemical Engineering Lab/Instrumental Methods of Analysis Lab", "3-Chemical Engineering Lab/Instrumental Methods of Analysis Lab", "4-Chemical Engineering Lab/Instrumental Methods of Analysis Lab", "5-Library", "6-Heat and Momentum Transfer Operations", "7-Enzyme Technology and Biotransformation"};
    String[] sbiotechtwotuesday = {"1-Heat and Momentum Transfer Operations", "2-Applied Thermodynamics for Biotechnologies", "3-Probability and Statistics", "4-Analytical Methods and Instrumentation", "5-Applied Thermodynamics for Biotechnologies", "6-Applied Thermodynamics for Biotechnologies", "7-Biorocess Principles"};
    String[] sbiotechtwowednesday = {"1-Heat and Momentum Transfer Operations”, 2-Analytical Methods and Instrumentation", "3-Bioprocess Principles", "4-Probability and Statistics", "5-Applied Thermodynamics for Biotechnologies", "6-Heat and Momentum Transfer Operations", "7-Enzyme Technology and Biotransformation"};
    String[] sbiotechtwothursday = {"1-Probability and Statistics", "2-Enzyme Technology and Biotransformation", "3-Seminar", "4-Enzyme Technology and Biotransformation”, “5-Applied Thermodynamics for Biotechnologies", "6-Analytical Methods and Instrumentation", "7-Bioprocess Principles"};
    String[] sbiotechtwofriday = {"1-Chemical Engineering Lab/Instrumental Methods of Analysis Lab", "2-Chemical Engineering Lab/Instrumental Methods of Analysis Lab", "3-Chemical Engineering Lab/Instrumental Methods of Analysis Lab", "4-Chemical Engineering Lab/Instrumental Methods of Analysis Lab", "5-Probability and Statistics", "6-Analytical Methods and Instrumentation", "7-Heat and Momentum Transfer Operations"};

    //bio_tech 3rd yr
    String[] tbiotechtwomonday = {"1-Genetic Engineering and Genomics", "2-Total Quality Management for Biotechnologies", "3-Immunology", "4-Immunology", "5-Total Quality Management for Biotechnologies", "6-Animal Biotechnology/Cancer Biology", "7-Library"};
    String[] tbiotechtwotuesday = {"1-Plant Biotechnology/Metabolic Engineering/IPR and Ethical Issues in Biotechnology", "2-Chemical Reaction Engineering", "3-Immunology", "4-Genetic Engineering Lab/Bioprocess Lab II", "5-Genetic Engineering Lab/Bioprocess Lab II", "6-Genetic Engineering Lab/Bioprocess Lab II", "7-Genetic Engineering Lab/Bioprocess Lab II"};
    String[] tbiotechtwowednesday = {"1-Animal Biotechnology/Cancer Biology", "2-Genetic Engineering and Genomics", "3-Immunology", "4-Plant Biotechnology/Metabolic Engineering/IPR and Ethical Issues in Biotechnology", "5-Chemical Reaction Engineering", "6-Chemical Reaction Engineering", "7-Seminar"};
    String[] tbiotechtwothursday = {"1-Chemical Reaction Engineering", "2-Genetic Engineering and Genomics", "3-Animal Biotechnology/Cancer Biology", "4-Genetic Engineering Lab/Bioprocess Lab II", "5-Genetic Engineering Lab/Bioprocess Lab II-", "6-Genetic Engineering Lab/Bioprocess Lab II", "7-Genetic Engineering Lab/Bioprocess Lab II"};
    String[] tbiotechtwofriday = {"1-Communication and Soft Skills Lab", "2-Communication and Soft Skills Lab", "3-Communication and Soft Skills Lab", "4-Communication and Soft Skills Lab", "5-Total Quality Management for Biotechnologies", "6-Genetic Engineering and Genomics", "7-Plant Biotechnology/Metabolic Engineering/IPR and Ethical Issues in Biotechnology"};

    //bio_tech 4th year
    String[] frbiotechtwomonday = {"1-Project work", "2-Project work", "3-Library", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frbiotechtwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frbiotechtwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frbiotechtwothursday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work review", "5-Project work review", "6-Project work review", "7-Project work review"};
    String[] frbiotechtwofriday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work review", "5-Project work review", "6-Project work review", "7-Project work review"};


     //odd sem of 1st,sec,third and fourth year biotech

    String[] fbiotechonemonday = {"1-Basic Electrical and Electronics Engineering", "2-Engineering Chemistry", "3-Communicative English", "4-Engineering Mathematics - I", "5-Engineering Drawing", "6-Engineering Drawing", "7-Engineering Drawing"};
    String[] fbiotechonetuesday = {"1-Engineering Practices Laboratory", "2-Engineering Practices Laboratory", "3-Engineering Practices Laboratory", "4-Engineering Physics", "5-Engineering Mathematics - I", "6-Engineering Chemistry", "7-Communicative English","8-Sports"};
    String[] fbiotechonewednesday = {"1-Communicative English", "2-Engineering Mathematics - I", "3-Basic Electrical and Electronics Engineering", "4-Physics and Chemistry Laboratory", "5-Physics and Chemistry Laboratory", "6-Engineering Physics", "7-Seminar I"};
    String[] fbiotechonethursday = {"1-Engineering Physics", "2-Communicative English", "3-Engineering Mathematics - I", "4-Basic Electrical and Electronics Engineering", "5-Library", "6-Engineering Chemistry", "7-Seminar II"};
    String[] fbiotechonefriday = {"1-Engineering Drawing", "2-Engineering Drawing", "3-Engineering Drawing", "4-Engineering Chemistry", "5-Basic Electrical and Electronics Engineering", "6-Engineering Physics", "7-Engineering Mathematics - I"};


    String[] sbiotechonemonday = {"1-Transforms and Partial Differential Equations", "2-Bioorganic Chemistry", "3-Environmental Science and Engineering", "4-Basic Industrial Biotechnology", "5-Cell Biology", "6-Stoichiometry and Process Calculations", "7-Basic Industrial Biotechnology"};
    String[] sbiotechonetuesday = {"1-Stoichiometry and Process Calculations", "2-Bioorganic Chemistry(T)", "3-Environmental Science and Engineering", "4-LUNCH(11.15-11.55)", "5-Cell Biology Lab/Bioorganic Chemistry Lab", "6-Cell Biology Lab/Bioorganic Chemistry Lab", "7-Cell Biology Lab/Bioorganic Chemistry Lab"};
    String[] sbiotechonewednesday = {"1-Basic Industrial Biotechnology", "2-Cell Biology", "3-Basic Industrial Biotechnology", "4-LUNCH(11.15-11.55)", "5-Cell Biology Lab/Bioorganic Chemistry Lab", "6-Cell Biology Lab/Bioorganic Chemistry Lab", "7-Cell Biology Lab/Bioorganic Chemistry Lab"};
    String[] sbiotechonethursday = {"1-Cell Biology", "2-Stoichiometry and Process Calculations(T)", "3-Library", "4-Transforms and Partial Differential Equations", "5-Bioorganic Chemistry", "6-Basic Industrial Biotechnology", "7-Environmental Science and Engineering"};
    String[] sbiotechonefriday = {"1-Bioorganic Chemistry(T)", "2-Cell Biology(T)", "3-Seminar", "4-Stoichiometry and Process Calculations", "5-Environmental Science and Engineering", "6-Transforms and Partial Differential Equations", "7-Transforms and Partial Differential Equations(T)"};

    //boitech third yr
    String[] tbiotechonemonday = {"1-Protein Structure Function and Proteomics", "2-Bioprocess Engineering", "3-Biophysics / Principles of Food Processing", "4-LUNCH(11.15-11.55)", "5-Bioprocess lab-1/Molecular Biology lab", "6-Bioprocess lab-1/Molecular Biology lab", "7-Bioprocess lab-1/Molecular Biology lab"};
    String[] tbiotechonetuesday = {"1-Bioprocess Engineering", "2-Protein Structure Function and Proteomics", "3-Mass Transfer Operation", "4-LUNCH(11.15-11.55)", "5-Bioprocess lab-1/Molecular Biology lab", "6-Bioprocess lab-1/Molecular Biology lab", "7-Bioprocess lab-1/Molecular Biology lab"};
    String[] tbiotechonewednesday = {"1-Biopharmaceutical Technology", "2-Molecular Biology", "3-Seminar I", "4-Mass Transfer Operation", "5-Protein Structure Function and Proteomics", "6-Library", "7-Mass Transfer Operation"};
    String[] tbiotechonethursday = {"1-Molecular Biology", "2-Biopharmaceutical Technology", "3-Bioprocess Engineering", "4-Biophysics / Principles of Food Processing", "5-Biopharmaceutical Technology", "6-Biophysics / Principles of Food Processing", "7-Protein Structure Function and Proteomics(T)"};
    String[] tbiotechonefriday = {"1-Mass Transfer Operation(T)", "2-Bioprocess Engineering(T)", "3-Biophysics / Principles of Food Processing", "4-Biopharmaceutical Technology", "5-Molecular Biology", "6-Seminar II", "7-Molecular Biology"};

//biotech fourth year

    String[] frbiotechonemonday = {"1-Bioinformatics and Computational Biology", "2-Bioconjugate Technology and Applications / Bio Industrial and Entrepreneurship ", "3-Downstream Processing", "4-Bioinformatics and Computational Biology(T)", "5-Creativity, Innovation and New Product Development", "6-Tissue Engineering / Neurobiology and Cognitive Sciences", "7-Seminar"};
    String[] frbiotechonetuesday = {"1-Bioinformatics and Computational Biology", "2-Project Planning", "3-Downstream Processing", "4-Creativity, Innovation and New Product Development", "5-Bioconjugate Technology and Applications / Bio Industrial and Entrepreneurship ", "6-Creativity, Innovation and New Product Development", "7-Tissue Engineering / Neurobiology and Cognitive Sciences"};
    String[] frbiotechonewednesday = {"1-Tissue Engineering / Neurobiology and Cognitive Sciences", "2-Bioinformatics and Computational Biology", "3-Library", "4-Immunology lab/Bioinformatics lab", "5-Immunology lab/Bioinformatics lab", "6-Immunology lab/Bioinformatics lab", "7-Immunology lab/Bioinformatics lab"};
    String[] frbiotechonethursday = {"1-Creativity, Innovation and New Product Development", "2-Bioconjugate Technology and Applications / Bio Industrial and Entrepreneurship ", "3-Downstream Processing", "4-Bioinformatics lab/Downstream Processing lab", "5-Bioinformatics lab/Downstream Processing lab", "6-Bioinformatics lab/Downstream Processing lab", "7-Bioinformatics lab/Downstream Processing lab"};
    String[] frbiotechonefriday = {"1-Bioconjugate Technology and Applications / Bio Industrial and Entrepreneurship ", "2-Tissue Engineering / Neurobiology and Cognitive Sciences", "3-Downstream Processing(T)", "4-Downstream Processing lab/Immunology lab", "5-Downstream Processing lab/Immunology lab", "6-Downstream Processing lab/Immunology lab", "7-Downstream Processing lab/Immunology lab"};


    //chem a all even semesters below
    //chem a first yr

    String[] fchematwomonday = {"1-Technical English", "2-Engineering Mathematics II", "3-Organic Chemistry", "4-Environmental Science and Engineering", "5-Basic Civil and Mechanical Engineering", "6-Technical English", "7-Environmental Science and Engineering"};
    String[] fchematwotuesday = {"1-Engineering Drawing", "2-Engineering Drawing", "3-Engineering Drawing", "4-Basic Civil and Mechanical Engineering", "5-Technical English", "6-Organic Chemistry", "7-Engineering Mathematics II"};
    String[] fchematwowednesday = {"1-Basic Civil and Mechanical Engineering", "2-Environmental Science and Engineering", "3-Technical English", "4-Engineering Mathematics II", "5-Engineering Drawing", "6-Engineering Drawing", "7-Engineering Drawing"};
    String[] fchematwothursday = {"1-Programming for Problem Solving Lab", "2-Programming for Problem Solving Lab", "3-Programming for Problem Solving Lab", "4-Organic Chemistry", "5-Basic Civil and Mechanical Engineering", "6-Engineering Mathematics II", "7-Library"};
    String[] fchematwofriday = {"1-Engineering Mathematics II", "2-Organic Chemistry", "3-Environmental Science and Engineering", "4-Basic Electrical and Electronics Lab", "5-Basic Electrical and Electronics Lab", "6-Basic Electrical and Electronics Lab", "7-Basic Electrical and Electronics Lab "};

    //chem a 2nd yr
    String[] schematwomonday = {"1-Chemical Process Calculations", "2-Heat Transfer", "3-Instrumental Methods of Analysis", "4-Instrumental Methods of Analysis", "5-Mechanical Operations", "6-Chemical Engineering Thermodynamics I", "7-Mechanical Operations"};
    String[] schematwotuesday = {"1-Probability and Statistics", "2-Heat Transfer", "3-Chemical Process Calculations", "4-Probability and Statistics", "5-Technical Analysis Lab/Fluid Mechanics Lab", "6-Technical Analysis Lab/Fluid Mechanics Lab", "7-Technical Analysis Lab/Fluid Mechanics Lab"};
    String[] schematwowednesday = {"1-Instrumental Methods of Analysis", "2-Chemical Engineering Thermodynamics I", "3-Mechanical Operations", "4-Chemical Process Calculations", "5-Chemical Engineering Thermodynamics I", "6-Heat Transfer", "7-Probability and Statistics"};
    String[] schematwothursday = {"1-Probability and Statistics", "2-Heat Transfer", "3-Mechanical Operations", "4-Chemical Engineering Thermodynamics I", "5-Technical Analysis Lab/Fluid Mechanics Lab", "6-Technical Analysis Lab/Fluid Mechanics Lab", "7-Technical Analysis Lab/Fluid Mechanics Lab"};
    String[] schematwofriday = {"1-Chemical Engineering Thermodynamics I", "2-Heat Transfer", "3-Heat Transfer", "4-Probability and Statistics", "5-Chemical Process Calculations", "6-Library", "7-Instrumental Methods of Analysis"};

    //chem a 3rd year
    String[] tchematwomonday = {"1-Material Science and Technology", "2-Energy Engineering", "3-Cpi", "4-Modern Separation Process/Food Technology/Process Optimization", "5-Mass Transfer Lab/Process Equipment Design I", "6-Mass Transfer Lab/Process Equipment Design I", "7-Mass Transfer Lab/Process Equipment Design I"};
    String[] tchematwotuesday = {"1-Modern Separation Process/Food Technology/Process Optimization", "2-Mass Transfer", "3-Mass Transfer", "4-Chemical Reaction Engineering I", "5-Mass Transfer Lab/Process Equipment Design I", "6-Mass Transfer Lab/Process Equipment Design I", "7-Mass Transfer Lab/Process Equipment Design I"};
    String[] tchematwowednesday ={"1-Cpi", "2-Modern Separation Process/Food Technology/Process Optimization", "3-Energy Engineering", "4-Chemical Reaction Engineering I", "5-Cri", "6-Chemical Reaction Engineering I", "7-Material Science and Technology"};
    String[] tchematwothursday = {"1-Energy Engineering", "2-Chemical Reaction Engineering I", "3-Modern Separation Process/Food Technology/Process Optimization", "4-Chemical Reaction Engineering I", "5-Mass Transfer Lab/Process Equipment Design I", "6-Mass Transfer Lab/Process Equipment Design I", "7-Mass Transfer Lab/Process Equipment Design I"};
    String[] tchematwofriday = {"1-Mass Transfer", "2-Material Science and Technology", "3-Energy Engineering", "4-Cri", "5-Material Science and Technology", "6-Mass Transfer", "7-Library"};

    //chem a 4th year
    String[] frchematwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frchematwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frchematwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frchematwothursday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frchematwofriday = {"1-Petroleum Technology", "2-Process Plant Utilities/Professional Ethics in Engineering", "3-Petroleum Technology", "4-Process Plant Utilities/Professional Ethics in Engineering", "5-Petroleum Technology", "6-Process Plant Utilities/Professional Ethics in Engineering", "7-Petroleum Technology/Process Plant Utilities/Professional Ethics in Engineering"};


    //odd sem of sec,third and fourth year chem a section


    String[] fchemaonemonday = {"1-Communicative English", "2-Physics and Chemistry Laboratory", "3-Physics and Chemistry Laboratory", "4-Engineering Mathematics - I", "5-SPECIAL CLASS -1 for Engineering Mathematics - I", "6-Engineering Chemistry", "7-Engineering Physics"};
    String[] fchemaonetuesday = {"1-Engineering Physics", "2-Engineering Chemistry", "3-Library", "4-Electrical Machines and Drives", "5-Communicative English", "6-Engineering Mathematics - I", "7-Programming for Problem Solving"};
    String[] fchemaonewednesday = {"1-Engineering Mathematics - I", "2-Engineering Physics", "3-Engineering Mathematics - I", "4-Programming for Problem Solving", "5-Electrical Machines and Drives", "6-Engineering Physics", "7-Communicative English"};
    String[] fchemaonethursday = {"1-Programming for Problem Solving", "2-Engineering Mathematics - I", "3-Electrical Machines and Drives", "4-Engineering Chemistry", "5-Electrical Machines and Drives", "6-Communicative English", "7-SPECIAL CLASS -2 for Electrical Machines and Drives"};
    String[] fchemaonefriday = {"1-Engineering Practices Laboratory", "2-Engineering Practices Laboratory", "3-Engineering Practices Laboratory", "4-Programming for Problem Solving", "5-SPECIAL CLASS -3 for Programming for Problem Solving", "6-Engineering Chemistry", "7-SPECIAL CLASS -4 for Engineering Mathematics - I", "8-SPORTS"};

    //chem a second yr

    String[] schemaonemonday = {"1-Electrical Drives and Controls", "2-Mathematics III", "3-Fluid Mechanics", "4-Physical Chemistry", "5-Mathematics III", "6-Mechanics of Solids for Chemical Engineering", "7-Physical Chemistry"};
    String[] schemaonetuesday = {"1-Fluid Mechanics", "2-Electrical Drives and Controls", "3-Mechanics of Solids for Chemical Engineering", "4-Mathematics III", "5-Library", "6-Organic Chemistry", "7-Fluid Mechanics"};
    String[] schemaonewednesday = {"1-Mathematics III", "2-Electrical Drives and Controls", "3-Mechanics of Solids for Chemical Engineering(T)", "4-Organic Chemistry", "5-Organic Chemistry Lab / Physical Chemistry Lab", "6-Organic Chemistry Lab / Physical Chemistry Lab", "7-Organic Chemistry Lab / Physical Chemistry Lab"};
    String[] schemaonethursday = {"1-Fluid Mechanics", "2-Physical Chemistry Lab / Organic Chemistry Lab", "3-Physical Chemistry Lab / Organic Chemistry Lab", "4-Physical Chemistry Lab / Organic Chemistry Lab", "5-Mechanics of Solids for Chemical Engineering", "6-Physical Chemistry", "7-Mathematics III"};
    String[] schemaonefriday = {"1-Organic Chemistry", "2-Fluid Mechanics", "3-Physical Chemistry", "4-Mechanics of Solids for Chemical Engineering", "5-Electrical Drives and Controls", "6-Fluid Mechanics(T)", "7-Organic Chemistry"};

    //chem a third year
    String[] tchemaonemonday = {"1-Chemical Process Industries I", "2-Chemical Engineering Thermodynamics II", "3-Environmental Science and Engineering", "4-Process Instrumentation Dynamics and Control", "5-Mass Transfer I", "6-Computational Methods", "7-Process Instrumentation Dynamics and Control"};
    String[] tchemaonetuesday = {"1-Interview and Career Skills Lab", "2-Interview and Career Skills Lab", "3-Interview and Career Skills Lab", "4-Interview and Career Skills Lab", "5-Mass Transfer I", "6-Computational Methods", "7-Chemical Process Industries I"};
    String[] tchemaonewednesday = {"1-Chemical Process Industries I", "2-Process Instrumentation Dynamics and Control", "3-Environmental Science and Engineering", "4-Chemical Engineering Thermodynamics II", "5-Computational Methods", "6-Mass Transfer I", "7-Chemical Engineering Thermodynamics II"};
    String[] tchemaonethursday = {"1-Computational Methods", "2-Process Instrumentation Dynamics and Control", "3-Chemical Engineering Thermodynamics II", "4-Environmental Science and Engineering", "5-Mechanical Operations Lab / Heat Transfer Lab", "6-Mechanical Operations Lab / Heat Transfer Lab", "7-Mechanical Operations Lab / Heat Transfer Lab"};
    String[] tchemaonefriday = {"1-Chemical Engineering Thermodynamics II", "2-Computational Methods", "3-Mass Transfer I", "4-Environmental Science and Engineering", "5-Heat Transfer Lab / Mechanical Operations Lab", "6-Heat Transfer Lab / Mechanical Operations Lab", "7-Heat Transfer Lab / Mechanical Operations Lab"};

//chem a fourth year

    String[] frchemaonemonday = {"1-Biochemical Engineering", "2-Chemical Process Plant Safety", "3-Drugs and Pharmaceutical Technology / Fertilizer Technology / Industrial Management", "4-Process Economics", "5-Transport Phenomena", "6-Process Economics", "7-Chemical Reaction Engineering(T)"};
    String[] frchemaonetuesday = {"1-Transport Phenomena", "2-Chemical Reaction Engineering", "3-Chemical Process Plant Safety", "4-Process Economics", "5-Chemical Reaction Engineering Lab / Process Control Lab", "6-Chemical Reaction Engineering Lab / Process Control Lab", "7-Chemical Reaction Engineering Lab / Process Control Lab"};
    String[] frchemaonewednesday = {"1-Chemical Reaction Engineering", "2-Drugs and Pharmaceutical Technology / Fertilizer Technology / Industrial Management", "3-Biochemical Engineering", "4-Drugs and Pharmaceutical Technology / Fertilizer Technology / Industrial Management", "5-Seminar and Comprehension", "6-Seminar and Comprehension", "7-Seminar and Comprehension"};
    String[] frchemaonethursday = {"1-Drugs and Pharmaceutical Technology / Fertilizer Technology / Industrial Management", "2-Chemical Process Plant Safety", "3-Biochemical Engineering", "4-Chemical Reaction Engineering", "5-Transport Phenomena", "6-Chemical Reaction Engineering", "7-Transport Phenomena"};
    String[] frchemaonefriday = {"1-Transport Phenomena", "2-Chemical Process Plant Safety", "3-Process Economics", "4-Biochemical Engineering", "5-Process Control Lab / Chemical Reaction Engineering Lab", "6-Process Control Lab / Chemical Reaction Engineering Lab", "7-Process Control Lab / Chemical Reaction Engineering Lab"};


    //chem b all even semesters below
    //chem b first yr
    String[] fchembtwomonday = {"1-Engineering mechanics", "2-BEEE", "3-Mathematics II", "4-Engineering chemistry II", "5-Technical english II", "6-BEEE", "7-Engineering physics II"};
    String[] fchembtwotuesday = {"1-Cp Lab/BEEE lab", "2-Cp Lab/BEEE lab", "3-Cp Lab/BEEE lab", "4-Enginering mechanics ", "5-BEEE", "6-Engineering physics II", "7-Technical english II"};
    String[] fchembtwowednesday = {"1-Mathematics II/BEEE", "2-Engineering mechanics", "3-Engineering physics II", "4-Technical english II", "5-Engineering chemistry II", "6-Mathematics II", "7-Engineering mechanics"};
    String[] fchembtwothursday = {"1-BEEE", "2-Engineering chemistry II", "3-Mathematics II", "4-Engineering mechanics", "5-Phy and Chem lab II", "6-Phy and Chem lab II", "7-Phy and Chem lab II"};
    String[] fchembtwofriday = {"2-Technical english II", "2-Mathematics II", "3-Engineering physics II", "4-Engineering chemistry II", "5-CP /BEEE Lab", "6-CP /BEEE Lab", "7-CP /BEEE Lab"};

    //chem b second yr
    String[] schembtwomonday = {"1-Chemical Process Calculations", "2-Heat Transfer", "3-Probability and Statistics", "4-Mechanical Operations", "5-Heat Transfer (Tutorial)", "6-Instrumental Methods of Analysis", "7-Chemical Engineering Thermodynamics I (Tutorial)"};
    String[] schembtwotuesday = {"1-Heat Transfer", "2-Mechanical Operations", "3-Instrumental Methods of Analysis", "4-Probability and Statistics", "5-Technical Analysis Laboratory / Fluid Mechanics Laboratory ", "6-Technical Analysis Laboratory / Fluid Mechanics Laboratory", "7-Technical Analysis Laboratory / Fluid Mechanics Laboratory"};
    String[] schembtwowednesday = {"1-Probability and Statistics", "2-Heat Transfer", "3-Chemical Engineering Thermodynamics I", "4-Chemical Process Calculations", "5-Instrumental Methods of Analysis", "6-Chemical Engineering Thermodynamics I", "7-Library"};
    String[] schembtwothursday = {"1-Instrumental Methods of Analysis", "2-Chemical Process Calculations", "3-Mechanical Operations", "4-Chemical Engineering Thermodynamics I", "5-Probability and Statistics (Tutorial)", "6-Heat Transfer", "7-Chemical Process Calculations (Tutorial)"};
    String[] schembtwofriday = {"1-Chemical Engineering Thermodynamics I", "2-Technical Analysis Laboratory / Fluid Mechanics Laboratory", "3-Technical Analysis Laboratory / Fluid Mechanics Laboratory", "4-Technical Analysis Laboratory / Fluid Mechanics Laboratory", "5-Mechanical Operations", "6-Chemical Process Calculations", "7-Probability and Statistics"};

    //chem b third yr

    String[] tchembtwomonday = {"1-Process Instrumentation Dynamics and Control", "2-Chemical Reaction Engineering I", "3-Food Technology / Air Pollution and Control", "4-Mass Transfer II ", "5-Process Equipment Design II / Mass Transfer Laboratory", "6-Process Equipment Design II / Mass Transfer Laboratory", "7-Process Equipment Design II / Mass Transfer Laboratory"};
    String[] tchembtwotuesday = {"1-Food Technology / Air Pollution and Control", "2-Energy Engineering", "3-Materials Science and Technology", "4-Process Instrumentation Dynamics and Control", "5-Heat Transfer Laboratory / Process Equipment Design II", "6-Heat Transfer Laboratory / Process Equipment Design II", "7-Heat Transfer Laboratory / Process Equipment Design II"};
    String[] tchembtwowednesday = {"1-Energy Engineering", "2-Food Technology / Air Pollution and Control", "3-Chemical Reaction Engineering I", "4-Materials Science and Technology", "5-Mass Transfer II", "6-Energy Engineering", "7-Chemical Reaction Engineering I"};
    String[] tchembtwothursday = {"1-Chemical Reaction Engineering I", "2-Mass Transfer II", "3-Process Instrumentation Dynamics and Control", "4-Food Technology / Air Pollution and Control", "5-Heat Transfer Laboratory / Mass Transfer Laboratory", "6-Heat Transfer Laboratory / Mass Transfer Laboratory", "7-Heat Transfer Laboratory / Mass Transfer Laboratory"};
    String[] tchembtwofriday = {"1-Materials Science and Technology", "2-Process Instrumentation Dynamics and Control", "3-Mass Transfer II", "4-Library", "5-Materials Science and Technology", "6-Chemical Reaction Engineering I", "7-Energy Engineering"};

    //chem b fourth yr
    String[] frchembtwomonday = {"1-Project Work", "2-Project Work", "3-Project Work", "4-Project Work", "5-Project Work", "6-Project Work", "7-Project Work"};
    String[] frchembtwotuesday = {"1-Project Work", "2-Project Work", "3-Project Work", "4-Project Work", "5-Project Work", "6-Project Work", "7-Project Work"};
    String[] frchembtwowednesday = {"1-Project Work", "2-Project Work", "3-Project Work", "4-Project Work", "5-Project Work", "6-Project Work", "7-Project Work"};
    String[] frchembtwothursday = {"1-Process Plant Utilities", "2-Petroleum Technology", "3-Process Plant Utilities", "4-Project Practice -Aspen Plus Training", "5-Project Practice -Aspen Plus Training", "6-Project Practice -Aspen Plus Training", "7-Project Practice -Aspen Plus Training"};
    String[] frchembtwofriday = {"1-Petroleum Technology", "2-Process Plant Utilities", "3-Petroleum Technology", "4-Process Plant Utilities", "5-Petroleum Technology", "6-Project Practice -Aspen Plus Training", "7-Project Practice -Aspen Plus Training"};

    // odd sem of second ,third and fourth year of chem bsection


    //chem b frst year
    //chem b frst year
    String[] fchembonemonday = {"1-Engineering Physics", "2-Electrical Machines and Drives", "3-Communicative English", "4-Engineering Mathematics - I", "5-Engineering Chemistry", "6-SPECIAL CLASS -1 for Engineering Mathematics - I", "7-Programming for Problem Solving"};
    String[] fchembonetuesday = {"1-Engineering Mathematics - I", "2-Programming for Problem Solving", "3-Engineering Chemistry", "4-Physics and Chemistry Laboratory", "5-Physics and Chemistry Laboratory", "6-Electrical Machines and Drives", "7-Communicative English"};
    String[] fchembonewednesday = {"1-Programming for Problem Solving", "2-Engineering Chemistry", "3-Electrical Machines and Drives", "4-Engineering Mathematics - I", "5-Programming for Problem Solving", "6-Engineering Graphics", "7-SPECIAL CLASS -2 for Electrical Machines and Drives"};
    String[] fchembonethursday = {"1-Electrical Machines and Drives", "2-Engineering Physics", "3-SPECIAL CLASS -3 for Programming for Problem Solving", "4-Communicative English", "5-Engineering Physics", "6-Engineering Mathematics - I", "7-SPECIAL CLASS -4 for Engineering Mathematics - I"};
    String[] fchembonefriday = {"1-Communicative English", "2-Engineering Chemistry", "3-Engineering Mathematics - I", "4-Engineering Physics", "5-Engineering Practices Laboratory", "6-Engineering Practices Laboratory", "7-Engineering Practices Laboratory","8-Sports"};

    //chem b second yr
    String[] schembonemonday = {"1-Mechanics of Solids for Chemical Engineering", "2-Organic Chemistry", "3-Mathematics III", "4-Electrical Drives and Controls", "5-Organic Chemistry Lab / Physical Chemistry Lab", "6-Organic Chemistry Lab / Physical Chemistry Lab", "7-Organic Chemistry Lab / Physical Chemistry Lab"};
    String[] schembonetuesday = {"1-Mathematics III", "2-Physical Chemistry Lab / Organic Chemistry Lab", "3-Physical Chemistry Lab / Organic Chemistry Lab", "4-Physical Chemistry Lab / Organic Chemistry Lab", "5-Library", "6-Electrical Drives and Controls", "7-Physical Chemistry"};
    String[] schembonewednesday = {"1-Fluid Mechanics", "2-Mathematics III", "3-Physical Chemistry", "4-Organic Chemistry", "5-Fluid Mechanics", "6-Organic Chemistry", "7-Mechanics of Solids for Chemical Engineering"};
    String[] schembonethursday = {"1-Electrical Drives and Controls", "2-Mechanics of Solids for Chemical Engineering(T)", "3-Mechanics of Solids for Chemical Engineering", "4-Fluid Mechanics", "5-Physical Chemistry", "6-Fluid Mechanics", "7-Mathematics III"};
    String[] schembonefriday = {"1-Fluid Mechanics(T)", "2-Mechanics of Solids for Chemical Engineering", "3-Electrical Drives and Controls", "4-Organic Chemistry", "5-Physical Chemistry", "6-Mathematics III", "7-Mechanics of Solids for Chemical Engineering"};

    //chem b third yr

    String[] tchembonemonday = {"1-Chemical Engineering Thermodynamics II", "2-Computational Methods", "3-Mass Transfer I", "4-Environmental Science and Engineering", "5-Mechanical Operations Lab / Heat Transfer Lab", "6-Mechanical Operations Lab / Heat Transfer Lab", "7-Mechanical Operations Lab / Heat Transfer Lab"};
    String[] tchembonetuesday = {"1-Computational Methods", "2-Process Instrumentation Dynamics and Control", "3-Mass Transfer I", "4-Chemical Process Industries I", "5-Heat Transfer Lab / Mechanical Operations Lab", "6-Heat Transfer Lab / Mechanical Operations Lab", "7-Heat Transfer Lab / Mechanical Operations Lab"};
    String[] tchembonewednesday = {"1-Chemical Engineering Thermodynamics II", "2-Chemical Process Industries I", "3-Process Instrumentation Dynamics and Control", "4-Mass Transfer I", "5-Process Instrumentation Dynamics and Control", "6-Computational Methods", "7-Chemical Engineering Thermodynamics II"};
    String[] tchembonethursday = {"1-Interview and Career Skills Lab", "2-Interview and Career Skills Lab", "3-Interview and Career Skills Lab", "4-Interview and Career Skills Lab", "5-Chemical Engineering Thermodynamics II", "6-Environmental Science and Engineering", "7-Chemical Engineering Thermodynamics-2"};
    String[] tchembonefriday = {"1-Environmental Science and Engineering", "2-Computational Methods", "3-Process Instrumentation Dynamics and Control", "4-Mass Transfer I", "5-Chemical Engineering Thermodynamics II", "6-Chemical Process Industries I", "7-Environmental Science and Engineering"};

    //chem b fourth yr
    String[] frchembonemonday = {"1-Transport Phenomena", "2-Process Economics", "3-Drugs and Pharmaceutical Technology / Fertilizer Technology / Industrial Management", "4-Chemical Process Plant Safety", "5-Seminar and Comprehension", "6-Seminar and Comprehension", "7-Seminar and Comprehension"};
    String[] frchembonetuesday = {"1-Process Economics", "2-Chemical Process Plant Safety", "3-Biochemical Engineering", "4-Chemical Reaction Engineering", "5-Transport Phenomena", "6-Chemical Process Plant Safety", "7-Process Economics"};
    String[] frchembonewednesday = {"1-Transport Phenomena", "2-Drugs and Pharmaceutical Technology / Fertilizer Technology / Industrial Management", "3-Chemical Reaction Engineering", "4-Drugs and Pharmaceutical Technology / Fertilizer Technology / Industrial Management", "5-Chemical Reaction Engineering Lab / Process Control Lab", "6-Chemical Reaction Engineering Lab / Process Control Lab", "7-Chemical Reaction Engineering Lab / Process Control Lab"};
    String[] frchembonethursday = {"1-Drugs and Pharmaceutical Technology / Fertilizer Technology / Industrial Management", "2-Biochemical Engineering", "3-Transport Phenomena", "4-Biochemical Engineering", "5-Process Control Lab / Chemical Reaction Engineering Lab", "6-Process Control Lab / Chemical Reaction Engineering Lab", "7-Process Control Lab / Chemical Reaction Engineering Lab"};
    String[] frchembonefriday = {"1-Transport Phenomena", "2-Chemical Reaction Engineering", "3-Chemical Process Plant Safety", "4-Chemical Reaction Engineering(T)", "5-Biochemical Engineering", "6-Chemical Reaction Engineering", "7-Process Economics"};

    //even sems for civil dept given below

    //civil first yr
    String[] fciviltwomonday = {"1-Building planning", "2-Programming for problem solving", "3-Engineering mechanics for CE", "4-EVS", "5-seminar 1", "6-Technical english", "7-Mathematics II"};
    String[] fciviltwotuesday = {"1-Programming lab", "2-Programming lab", "3-Programming lab", "4-Mathematics II", "5-Programming for problem solving", "6-Technical english", "7-Engineering mechanics for CE"};
    String[] fciviltwowednesday ={"1-CAD LAB", "2-CAD LAB", "3-CAD LAB", "4-EVS", "5-Engineering mechanics for CE", "6-Building planning", "7-Lib"};
    String[] fciviltwothursday = {"1-Engineering mechanics for CE", "2-evs", "3-Mathematics II", "4-Technical english", "5-Programming for problem solving", "6-Building planning", "7-"};
    String[] fciviltwofriday = {"1Mathematics II-", "2-Technical english", "3-Building planning", "4-EVS", "5-Engineering mechanics for CE", "6-Mathematics II", "7-Programming for problem solving"};

    //civil 2nd yr
    String[] sciviltwomonday ={"1-EVS", "2-Surveying II", "3-Applied Hydraulic engineering", "4-Computational methods", "5-Soil mechanics", "6-Applied Hydraulic engineering", "7-Strength of materials"};
    String[] sciviltwotuesday = {"1-Soil mechanics", "2-EVS", "3-Strength of materials", "4-Survey practical", "5-Hydraulic engineering/Survey lab", "6-Hydraulic engineering/Survey lab", "7-Hydraulic engineering/Survey lab"};
    String[] sciviltwowednesday = {"1-Surveying II", "2-Computational methods", "3-Applied Hydraulic engineering", "4-Strength of materials", "5-Hydraulic engineering/Survey lab", "6-Hydraulic engineering/Survey lab", "7-Hydraulic engineering/Survey lab"};
    String[] sciviltwothursday = {"1-Computational methods", "2-Surveying II", "3-Soil mechanics", "4-EVS", "5-Strength of materials", "6-Computational methods", "7-Applied Hydraulic engineering"};
    String[] sciviltwofriday = {"1-Applied Hydraulic engineering", "2-Soil mechanics", "3-Strength of materials", "4-Computational methods", "5-EVS", "6-Surveying II", "7-LIB"};

    //civil 3rd yr
    String[] tciviltwomonday = {"1-Structural Analysis II", "2-Design of steel and timber structures", "3-Environmental enginnering II", "4-Railways harbour enginnering", "5-Structural engineering and design principles", "6-sst", "7-Railways harbour enginnering"};
    String[] tciviltwotuesday ={"1-Structural engineering and design principles", "2-Railways harbour enginnering", "3-Design of steel and timber structures", "4-Environmental enginnering II", "5--Structural Analysis II", "6-Railways harbour enginnering", "7-sst"};
    String[] tciviltwowednesday ={"1-Railways harbour enginnering", "2-Structural Analysis II", "3-Structural engineering and design principles", "4-Railways harbour enginnering", "5-Design of steel and timber structures", "6-Environmental enginnering II", "7-sst"};
    String[] tciviltwothursday ={"1-Environmental enginnering II", "2-Railways harbour enginnering", "3-Railways harbour enginnering", "4-Structural Analysis II", "5-environmental enginnering/concrete and highway enginnering lab", "6-environmental enginnering/concrete and highway enginnering lab", "7-environmental enginnering/concrete and highway enginnering lab"};
    String[] tciviltwofriday = {"1-Design of steel and timber structures", "2-", "3-Structural Analysis II", "4-SST", "5-environmental enginnering/concrete and highway enginnering lab", "6-environmental enginnering/concrete and highway enginnering lab", "7-environmental enginnering/concrete and highway enginnering lab"};

    //civil 4th yr
    String[] frciviltwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frciviltwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frciviltwowednesday ={"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frciviltwothursday ={"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frciviltwofriday = {"1-Petroleum Technology", "2-Proccess plant utilities/Professional ethics", "3-Petroleum Technology", "4-Proccess plant utilities/Professional ethics", "5-Petroleum Technology", "6-Proccess plant utilities/Professional ethics", "7-Petroleum Technology/Proccess plant utilities/Professional ethics"};


    //odd sem for first, second ,third and fourth year in civil

    //civil 1st year

    String[] fcivilonemonday = {"1-Engineering Drawing", "2-Engineering Drawing", "3-Engineering Drawing", "4-Basic Electrical and Electronics Engineering", "5-Engineering Physics", "6-Engineering Mathematics - I", "7-Communicative English"};
    String[] fcivilonetuesday = {"1-Engineering Physics", "2-Engineering Chemistry", "3-Seminar I", "4-Seminar II", "5-Engineering Drawing", "6-Engineering Drawing", "7-Engineering Drawing"};
    String[] fcivilonewednesday = {"1-Engineering Mathematics - I", "2-Engineering Physics", "3-Engineering Mathematics - I", "4-Engineering Physics I", "5-Engineering Practices Laboratory", "6-Engineering Practices Laboratory", "7-Engineering Practices Laboratory", "8-Sports"};
    String[] fcivilonethursday = {"1-Engineering Chemistry", "2-Communicative English", "3-Engineering Mathematics - I", "4-Engineering Physics", "5-Communicative English", "6-Library", "7-Engineering Chemistry"};
    String[] fcivilonefriday = {"1-Basic Electrical and Electronics Engineering", "2-Engineering Physics", "3-Basic Electrical and Electronics Engineering", "4-Communicative English", "5-Engineering Chemistry", "6-Physics and Chemistry Laboratory", "7-Physics and Chemistry Laboratory"};


    //civil 2nd yr
    String[] scivilonemonday = {"1-Construction Materials", "2-Mechanics of Fluids", "3-Strength of Materials I", "4-Mathematics III", "5-Mechanics of Fluids", "6-Surveying I", "7-Strength of Materials I(T)"};
    String[] scivilonetuesday = {"1-Engineering Geology", "2-Surveying I", "3-Strength of Materials I", "4-Mathematics III", "5-Strength of Materials lab/Computer Aided Building Drawing", "6-Strength of Materials lab/Computer Aided Building Drawing", "7-Strength of Materials lab/Computer Aided Building Drawing"};
    String[] scivilonewednesday = {"1-Mathematics III", "2-Mechanics of Fluids", "3-Construction Materials", "4-Surveying I", "5-Strength of Materials lab/Computer Aided Building Drawing", "6-Strength of Materials lab/Computer Aided Building Drawing", "7-Strength of Materials lab/Computer Aided Building Drawing"};
    String[] scivilonethursday = {"1-Mechanics of Fluids", "2-Construction Materials", "3-Engineering Geology", "4-Library", "5-Strength of Materials-1", "6-Mathematics III", "7-Engineering Geology"};
    String[] scivilonefriday = {"1-Mathematics III", "2-Strength of Materials I", "3-Mechanics of Fluids(T)", "4-Mathematics III", "5-Construction Materials", "6-Seminar", "7-Engineering Geology"};

    //civil 3rd yr
    String[] tcivilonemonday = {"1-Soil Mechanics Lab / Interview and Career Skills Lab", "2-Soil Mechanics Lab / Interview and Career Skills Lab", "3-Soil Mechanics Lab / Interview and Career Skills Lab", "4-Soil Mechanics Lab / Interview and Career Skills Lab", "5-Enviromental Engineering I", "6-Structural Analysis I", "7-Design of Reinforced Concrete Elements"};
    String[] tcivilonetuesday = {"1-Enviromental Engineering I", "2-Structural Analysis I(T)", "3-Construction Techniques, Equipment and Practice", "4-Design of Reinforced Concrete Elements", "5-Structural Analysis I", "6-Highway Engineering", "7-Foundation Engineering"};
    String[] tcivilonewednesday = {"1-Soil Mechanics Lab / Interview and Career Skills Lab", "2-Soil Mechanics Lab / Interview and Career Skills Lab", "3-Soil Mechanics Lab / Interview and Career Skills Lab", "4-Soil Mechanics Lab / Interview and Career Skills Lab", "5-Highway Engineering", "6-Foundation Engineering", "7-Construction Techniques, Equipment and Practice"};
    String[] tcivilonethursday = {"1-Construction Techniques, Equipment and Practice", "2-Foundation Engineering", "3-Enviromental Engineering I", "4-Highway Engineering", "5-Structural Analysis I", "6-Design of Reinforced Concrete Elements", "7-Seminar"};
    String[] tcivilonefriday = {"1-Structural Analysis I", "2-Design of Reinforced Concrete Elements", "3-Highway Engineering", "4-Foundation Engineering", "5-Construction Techniques, Equipment and Practice", "6-Enviromental Engineering I", "7-Library"};

    //civil 4th yr
    String[] frcivilonemonday = {"1-Municipal Solid Waste Management", "2-Structural Dynamics and Earthquake Engineering", "3-Water Resources and Irrigation Engineering", "4-Traffic Engineering and Management", "5-Prestressed Concrete Structures", "6-Estimation and Quantity Surveying", "7-Library"};
    String[] frcivilonetuesday = {"1-Traffic Engineering and Management", "2-Estimation and Quantity Surveying", "3-Municipal Solid Waste Management", "4-Prestressed Concrete Structures", "5-Water Resources and Irrigation Engineering", "6-Structural Dynamics and Earthquake Engineering", "7-Technical Skills"};
    String[] frcivilonewednesday = {"1-Structural Dynamics and Earthquake Engineering", "2-Traffic Engineering and Management", "3-Municipal Solid Waste Management", "4-Prestressed Concrete Structures", "5-Water Resources and Irrigation Engineering", "6-Estimation and Quantity Surveying", "7-Quantitative and Aptitude"};
    String[] frcivilonethursday = {"1-Estimation and Quantity Surveying", "2-Traffic Engineering and Management", "3-Structural Dynamics and Earthquake Engineering", "4-Computer Aided Design and Drafting Lab / Design Project", "5-Computer Aided Design and Drafting Lab / Design Project", "6-Computer Aided Design and Drafting Lab / Design Project", "7-Computer Aided Design and Drafting Lab / Design Project"};
    String[] frcivilonefriday = {"1-Water Resources and Irrigation Engineering", "2-Municipal Solid Waste Management", "3-Prestressed Concrete Structures", "4-Computer Aided Design and Drafting Lab / Design Project", "5-Computer Aided Design and Drafting Lab / Design Project", "6-Computer Aided Design and Drafting Lab / Design Project", "7-Computer Aided Design and Drafting Lab / Design Project"};


    //Even sem for cse a all years
    //cse a 1st yr
    String[] fcseatwomonday = {"1-Digital Principal and System Desidn", "2-Mathematics II", "3-Environmental science and engineering", "4-technical english II", "5-Digital lab/OOPS lab", "6-Digital lab/OOPS lab", "7-Digital lab/OOPS lab"};
    String[] fcseatwotuesday = {"Mathematics II", "2-OOP", "3-Environmental science and engineering", "4-Library", "5-Seminar", "6-Mathematics II", "7-Digital Principal and System Desidn"};
    String[] fcseatwowednesday = {"1-Engineering Drawing", "2-Engineering Drawing", "3-Engineering Drawing", "4-", "5-Mathematics II", "6-OOP", "7-technical english II"};
    String[] fcseatwothursday = {"1-Digital lab/OOPS lab", "2-Digital lab/OOPS lab", "3-Digital lab/OOPS lab", "4-Environmental science and engineering", "5-Engineering Drawing", "6-Engineering Drawing", "7-Engineering Drawing"};
    String[] fcseatwofriday = {"1-technical english II", "2-OOP", "3-Digital Principal and System Desidn ", "4-Mathematics I", "5-technical english II", "6-Environmental science and engineering", "7-OOP"};

    //cse a 2nd yr
    String[] scseatwomonday = {"1-Database Mamagement System", "2-Software engineering", "3-Design and analysis of algorithm", "4-Computer networks", "5-Database Mamagement System/Software engineering lab", "6-Database Mamagement System/Software engineering lab", "7-Database Mamagement System/Software engineering lab"};
    String[] scseatwotuesday = {"1-Design and analysis of algorithm", "2-NETWORKS LAB/Database Mamagement System LAB", "3-NETWORKS LAB/Database Mamagement System LAB", "4-NETWORKS LAB/Database Mamagement System LAB", "5-Software engineering", "6-Probability and Queueing theory", "7-Computer networks"};
    String[] scseatwowednesday = {"1-Computer networks", "2-Computer Architechture", "3-Probability and Queueing theory", "4-Software engineering", "5-Computer Architechture", "6-Database Mamagement System", "7-Design and analysis of algorithm"};
    String[] scseatwothursday = {"1-Computer Architechture", "2-Database Mamagement System", "3-Probability and Queueing theory", "4-LIB", "5-NETWORK /SOFTWARE ENGINEERING LAB", "6-NETWORK /SOFTWARE ENGINEERING LAB", "7-NETWORK /SOFTWARE ENGINEERING LAB"};
    String[] scseatwofriday = {"1-Probability and Queueing theory", "2-Computer Architechture", "3-Computer networks", "4-Database Mamagement System", "5-Design and analysis of algorithm", "6-Probability and Queueing theory", "7-Software engineering"};

    //cse a 3rd yr
    String[] tcseatwomonday = {"1-Mobile computing", "2-AI lab/compiler lab", "3-AI lab/compiler lab", "4-AI lab/compiler lab", "5-AI", "6-Machine learning", "7-Compiler design"};
    String[] tcseatwotuesday = {"1-Machine learning", "2-AI", "3-Digital signal proccessing", "4-Mobile computing", "5-AI lab/-Mobile application development lab", "6-AI lab/-Mobile application development lab", "7-AI lab/-Mobile application development lab"};
    String[] tcseatwowednesday = {"1-AI", "2-Mobile application development lab/Compiler lab", "3-Mobile application development lab/Compiler lab", "4-Mobile application development lab/Compiler lab", "5-Information retrieval techniques", "6- Compiler design", "7-Digital signal proccessing"};
    String[] tcseatwothursday = {"1-Information retrieval techniques", "2-Digital signal proccessing", "3-Compiler design", "4-Mobile computing", "5-AI", "6-Compiler design", "7-Machine learning"};
    String[] tcseatwofriday = {"1-Digital signal proccessing", "2-Compiler design", "3-Machine learning", "4-Compiler design", "5-Mobile computing", "6-igital signal proccessing", "7-LIB"};

    //cse a 4th yr
    String[] frcseatwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcseatwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcseatwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcseatwothursday = {"1-Professional ethics", "2-Multi-core architecture", "3-Knowledge management", "4-Multi-core architecture", "5-Professional ethics", "6-Knowledge management", "7-seminar"};
    String[] frcseatwofriday = {"1-Multi-core architecture", "2-Knowledge management", "3-Professional ethics", "4-Lib", "5-Knowledge management", "6-Multi-core architecture", "7-Professional ethics"};

    //odd sem for first,second,third and fourth year of cse a section

    // cse a 1st year

    String[] fcseaonemonday = {"1-Computer Practices Laboratory", "2-Engineering Chemistry", "3-Engineering Physics", "4-Physics and Chemistry Laboratory", "5-Physics and Chemistry Laboratory", "6-Programming for Problem Solving", "7-Communicative English","8-Sports"};
    String[] fcseaonetuesday = {"1-Programming for Problen Solving Laboratory", "2-Programming for Problen Solving Laboratory", "3-Programming for Problen Solving Laboratory", "4-Communicative English", "5-Engineering Mathematics - I", "6-Basic Electrical and Electronics Engineering", "7-Library"};
    String[] fcseaonewednesday = {"1-Engineering Chemistry", "2-Engineering Graphics", "3-Engineering Mathematics - I", "4-Basic Electrical and Electronics Engineering", "5-Seminar", "6-Communicative English", "7-Programming for Problem Solving"};
    String[] fcseaonethursday = {"1-Programming for Problem Solving", "2-Communicative English", "3-Basic Electrical and Electronics Engineering", "4-Engineering Physics", "5-Engineering Mathematics - I", "6-Engineering Chemistry", "7-Engineering Physics"};
    String[] fcseaonefriday = {"1-Engineering Practices Laboratory", "2-Engineering Practices Laboratory", "3-Engineering Practices Laboratory", "4-Programming for Problem Solving", "5-Basic Electrical and Electronics Engineering", "6-Engineering Mathematics - I", "7-Engineering Chemistry"};

    //cse c 2nd yr
    String[] scseaonemonday = {"1-Operating Systems", "2-Programming and Data Structures II", "3-Microprocessor and Microcontroller", "4-Mathematics III", "5-Library", "6-Analog and Digital Communication", "7-Environmental Science and Engineering"};
    String[] scseaonetuesday = {"1-Mathematics III", "2-Operating Systems Lab / Microprocessor and Microcontroller Lab", "3-Operating Systems Lab / Microprocessor and Microcontroller Lab", "4-Operating Systems Lab / Microprocessor and Microcontroller Lab", "5-Programming and Data Structures II ", "6-Analog and Digital Communication", "7-Software engineering"};
    String[] scseaonewednesday = {"1-Microprocessor and Microcontroller", "2-Environmental Science and Engineering", "3-Operating Systems", "4-Analog and Digital Communication", "5-Programming and Data Structures Lab II / Operating Systems Lab", "6-Programming and Data Structures Lab II / Operating Systems Lab", "7-Programming and Data Structures Lab II / Operating Systems Lab"};
    String[] scseaonethursday = {"1-Analog and Digital Communication", "2-Microprocessor and Microcontroller Lab / Programming and Data Structures Lab II", "3-Microprocessor and Microcontroller Lab / Programming and Data Structures Lab II", "4-Microprocessor and Microcontroller Lab / Programming and Data Structures Lab II", "5-Mathematics III", "6-Operating Systems", "7-Programming and Data Structures II"};
    String[] scseaonefriday = {"1-Environmental Science and Engineering", "2-Microprocessor and Microcontroller", "3-Programming and Data Structures II", "4-Mathematics III", "5-Environmental Science and Engineering", "6-Operating Systems", "7-Microprocessor and Microcontroller"};

    //cse c 3rd yr
    String[] tcseaonemonday = {"1-Object Oriented Analysis and Design", "2-Internet Programming(T)", "3-Theory of Computation", "4-Discrete Mathematics", "5-Computer Graphics Lab / Internet Programming Lab", "6-Computer Graphics Lab / Internet Programming Lab", "7-Computer Graphics Lab / Internet Programming Lab"};
    String[] tcseaonetuesday = {"1-Interview and Career Skills Lab", "2-Interview and Career Skills Lab", "3-Interview and Career Skills Lab", "4-Interview and Career Skills Lab", "5-Internet Programming", "6-Seminar I", "7-Computer Graphics"};
    String[] tcseaonewednesday = {"1-Internet Programming", "2-Object Oriented Analysis and Design", "3-Discrete Mathematics", "4-Theory of Computation", "5-Library", "6-Computer Graphics", "7-Object Oriented Analysis and Design"};
    String[] tcseaonethursday = {"Discrete Mathematics", "2-Seminar II", "3-Theory of Computation", "4-Computer Graphics", "5-Discrete Mathematics", "6-Internet Programming", "7-Theory of Computation"};
    String[] tcseaonefriday = {"1-Computer Graphics", "2-Internet Programming", "3-Discrete Mathematics", "4-Object Oriented Analysis and Design", "5-Internet Programming Lab / Computer Graphics Lab", "6-Internet Programming Lab / Computer Graphics Lab", "7-Internet Programming Lab / Computer Graphics Lab"};

    //cse c 4th yr

    String[] frcseaonemonday = {"1-Resource Management Techniques", "2-Cyber Forensics", "3-Cryptography and Network Security", "4-Project I", "5-Grid and Cloud Computing", "6-Project II", "7-Information Retrieval"};
    String[] frcseaonetuesday = {"1-Security Lab / Grid and Cloud Computing Lab", "2-Security Lab / Grid and Cloud Computing Lab", "3-Security Lab / Grid and Cloud Computing Lab", "4-Grid and Cloud Computing", "5-Cyber Forensics", "6-Cryptography and Network Security", "7-Project III"};
    String[] frcseaonewednesday = {"1-Grid and Cloud Computing", "2-Information Retrieval", "3-Cryptography and Network Security", "4-Cyber Forensics", "5-Library", "6-Resource Management Techniques", "7-Graph Theory and Applications"};
    String[] frcseaonethursday = {"1-Graph Theory and Applications", "2-Information Retrieval", "3-Graph Theory and Applications", "4-Cryptography and Network Security", "4-project work", "5-Seminar", "6-Cyber Forensics", "7-Resource Management Techniques"};
    String[] frcseaonefriday = {"1-Grid and Cloud Computing Lab / Security Lab", "2-Grid and Cloud Computing Lab / Security Lab", "3-Grid and Cloud Computing Lab / Security Lab", "4-Resource Management Techniques", "5-Graph Theory and Applications", "6-Information Retrieval", "7-Grid and Cloud Computing"};


    //even sem for cse b
    //cse b first yr

    //cse b 1st yr
    String[] fcsebtwomonday = {"1-Digital Principal and System Desidn", "2-OOP", "3-Mathematics II", "4-Engineering Drawing", "5-technical english II", "6-LIB", "7-Digital Principal and System Desidn"};
    String[] fcsebtwotuesday = {"1-Engineering Drawing", "2-Engineering Drawing", "3-Engineering Drawing", "4-technical english II", "5-Digital lab/OOPS lab", "6-Digital lab/OOPS lab", "7-Digital lab/OOPS lab"};
    String[] fcsebtwowednesday = {"1-Digital lab/OOPS lab", "2-Digital lab/OOPS lab", "3-Digital lab/OOPS lab", "4-Mathematics II", "5-Engineering Drawing", "6-Engineering Drawing", "7-Engineering Drawing"};
    String[] fcsebtwothursday = {"1-technical english II", "2-Mathematics II", "3-OOP", "4-Digital Principal and System Desidn", "5-Mathematics II", "6-Engineering Drawing", "7-SEMINAR"};
    String[] fcsebtwofriday ={"1-Digital Principal and System Desidn", "2-Engineering Drawing", "3-technical english II", "4-Engineering Drawing", "5-Digital Principal and System Desidn", "6-Mathematics II", "7-OOP"};

    //cse b 2nd yr
    String[] scsebtwomonday = {"1-Probability and Queueing theory", "2-Computer Architechture", "3-Database Mamagement System", "4-Probability and Queueing theory", "5- Software engineering ", "6-Software engineering", "7-Database Mamagement System"};
    String[] scsebtwotuesday ={"1-Computer Architechture", "2-Design and analysis of algorithm", "3-Networks", "4-Database Mamagement System", "5-Probability and Queueing theory", "6-Software engineering", "7-LIB"};
    String[] scsebtwowednesday = {"1-", "2-Database Mamagement System/Software engineering lab", "3-Database Mamagement System/Software engineering lab", "4-Database Mamagement System/Software engineering lab", "5-Computer Architechture", "6-Networks", "7-Probability and Queueing theory"};
    String[] scsebtwothursday = {"1-Design and analysis of algorithm", "2-NETWORK /SOFTWARE ENGINEERING LAB", "3-NETWORK /SOFTWARE ENGINEERING LAB", "4-NETWORK /SOFTWARE ENGINEERING LAB", "5-Database Mamagement System", "6-Networks", "7-Software engineering"};
    String[] scsebtwofriday = {"1-Software engineering", "2-Design and analysis of algorithm", "3-Probability and Queueing theory", "4-Computer Architechture", "5--NETWORKS LAB/Database Mamagement System LAB", "6--NETWORKS LAB/Database Mamagement System LAB", "7--NETWORKS LAB/Database Mamagement System LAB"};

    //cse b 3rd yr
    String[] tcsebtwomonday = {"1-Mobile computing", "2-AI", "3-User Interface technologies", "4-Digital signal proccessing", "5-AI", "6-Machine learning", "7-Compiler design"};
    String[] tcsebtwotuesday = {"1-Machine learning", "2-mobile application development lab/Compiler lab", "3-mobile application development lab/Compiler lab", "4-mobile application development lab/Compiler lab-", "5-Mobile computing", "6-Compiler design", "7-Digital signal proccessing"};
    String[] tcsebtwowednesday = {"1-User Interface technologies", "2-AI", "3-Mobile computing", "4-Compiler design", "5-AI lab/-Mobile application development lab", "6-AI lab/-Mobile application development lab", "7-AI lab/-Mobile application development lab"};
    String[] tcsebtwothursday = {"1-Machine learning", "2-Digital signal proccessing", "3-Compiler design", "4-Digital signal proccessing", "5-AI lab/compiler lab", "6-AI lab/compiler lab", "7-AI lab/compiler lab"};
    String[] tcsebtwofriday ={"1-Digital signal proccessing", "2-User Interface technologies", "3-Compiler design", "4-User Interface technologies", "5-Mobile computing", "6-AI", "7-Machine learning"};

    //cse b 4th yr
    String[] frcsebtwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcsebtwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcsebtwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcsebtwothursday = {"1-Multi-core architecture", "2-Knowledge management", "3-Professional ethics", "4-Knowledge management", "5-lib", "6-Multi-core architecture", "7-Professional ethics"};
    String[] frcsebtwofriday = {"1-Professional ethics", "2-Multi-core architecture", "3-Knowledge management", "4-Seminar", "5-Professional ethics", "6-Multi-core architecture", "7-Knowledge management"};

    //odd sem for frst, second,third and fourth for cse b section

    // cse  b frst year

    String[] fcsebonemonday = {"1-Engineering Practices Laboratory", "2-Engineering Practices Laboratory", "3-Engineering Practices Laboratory", "4-Engineering Mathematics - I", "5-Communicative English", "6-Engineering Physics", "7-Programming for Problem Solving"};
    String[] fcsebonetuesday = {"1-Basic Electrical and Electronics Engineering", "2-Engineering Physics", "3-Engineering Mathematics - I", "4-Programming for Problem Solving", "5-Communicative English", "6-Library", "7-Engineering Chemistry", "8-Sports"};
    String[] fcsebonewednesday = {"1-Engineering Mathematics - I", "2-Physics and Chemistry Laboratory", "3-Physics and Chemistry Laboratory", "4-Engineering Chemistry", "5-Programming for Problem Solving", "6-Communicative English", "7-Basic Electrical and Electronics Engineering"};
    String[] fcsebonethursday = {"1-Programming for Problem Solving", "2-Engineering Physics", "3-Basic Electrical and Electronics Engineering", "4-Engineering Mathematics - I", "5-Engineering Chemistry", "6-Communicative English", "7-Seminar"};
    String[] fcsebonefriday = {"1-Engineering Chemistry", "2-Engineering Physics", "3-Engineering Mathematics - I", "4-Basic Electrical and Electronics Engineering", "5-Programming for Problen Solving Laboratory", "6-Programming for Problen Solving Laboratory", "7-Programming for Problen Solving Laboratory"};


    //cse b 2nd yr
    String[] scsebonemonday = {"1-Microprocessor and Microcontroller", "2-Programming and Data Structures Lab II / Operating Systems Lab", "3-Programming and Data Structures Lab II / Operating Systems Lab", "4-Programming and Data Structures Lab II / Operating Systems Lab", "5-Programming and Data Structures II", "6-Mathematics III", "7-Operating Systems"};
    String[] scsebonetuesday = {"1-Programming and Data Structures II", "2-Operating Systems", "3-Mathematics III", "4-Analog and Digital Communication", "5-Microprocessor and Microcontroller Lab / Programming and Data Structures Lab II", "6-Microprocessor and Microcontroller Lab / Programming and Data Structures Lab II", "7-Microprocessor and Microcontroller Lab / Programming and Data Structures Lab II"};
    String[] scsebonewednesday = {"1-Operating Systems", "2-Environmental Science and Engineering", "3-Programming and Data Structures II", "4-Microprocessor and Microcontroller", "5-Library", "6-Microprocessor and Microcontroller", "7-Analog and Digital Communication"};
    String[] scsebonethursday = {"1-Operating Systems", "2-Mathematics III", "3-Environmental Science and Engineering", "4-Analog and Digital Communication", "5-Microprocessor and Microcontroller", "6-Environmental Science and Engineering", "7-Mathematics III"};
    String[] scsebonefriday = {"1-Mathematics III", "2-Operating Systems Lab / Microprocessor and Microcontroller Lab", "3-Operating Systems Lab / Microprocessor and Microcontroller Lab", "4-Operating Systems Lab / Microprocessor and Microcontroller Lab", "5-Analog and Digital Communication", "6-Environmental Science and Engineering", "7-Programming and Data Structures II"};

    //cse b 3rd yr
    String[] tcsebonemonday = {"1-Theory of Computation", "2-Discrete Mathematics", "3-Object Oriented Analysis and Design", "4-Internet Programming", "5-Seminar I", "6-Interview and Career Skills Lab", "7-Interview and Career Skills Lab"};
    String[] tcsebonetuesday = {"1-Computer Graphics", "2-Discrete Mathematics", "3-Internet Programming", "4-Discrete Mathematics", "5-Library", "6-Interview and Career Skills Lab", "7-Interview and Career Skills Lab"};
    String[] tcsebonewednesday = {"1-Internet Programming(T)", "2-Internet Programming Lab / Computer Graphics Lab", "3-Internet Programming Lab / Computer Graphics Lab", "4-Internet Programming Lab / Computer Graphics Lab", "5-Object Oriented Analysis and Design", "6-Computer Graphics", "7-Theory of Computation"};
    String[] tcsebonethursday = {"1-Object Oriented Analysis and Design", "2-Computer Graphics Lab / Internet Programming Lab", "3-Computer Graphics Lab / Internet Programming Lab", "4-Computer Graphics Lab / Internet Programming Lab", "5-Discrete Mathematics", "6-Theory of Computation", "7-Computer Graphics"};
    String[] tcsebonefriday = {"1-Internet Programming", "2-Seminar II", "3-Computer Graphics", "4-Discrete Mathematics", "5-Theory of Computation", "6-Internet Programming", "7-Object Oriented Analysis and Design"};

    //cse b 4th yr
    String[] frcsebonemonday = {"1-Graph Theory and Applications", "2-Grid and Cloud Computing", "3-Seminar", "4-Cyber Forensics", "5-Security Lab / Grid and Cloud Computing Lab", "6-Security Lab / Grid and Cloud Computing Lab", "7-Security Lab / Grid and Cloud Computing Lab"};
    String[] frcsebonetuesday = {"1-Grid and Cloud Computing", "2-Resource Management Techniques", "3-Information Retrieval", "4-Cryptography and Network Security", "5-Project I", "6-Graph Theory and Applications", "7-Project II"};
    String[] frcsebonewednesday = {"1-Cryptography and Network Security", "2-Library", "3-Grid and Cloud Computing lab/Security lab", "4-Information Retrieval", "5-Grid and Cloud Computing", "6-Cyber Forensics", "7-Graph Theory and Applications"};
    String[] frcsebonethursday = {"1-Grid and Cloud Computing Lab / Security Lab", "2-Grid and Cloud Computing Lab / Security Lab", "3-Grid and Cloud Computing Lab / Security Lab", "4-Cyber Forensics", "5-Information Retrieval", "6-Cryptography and Network Security", "7-Resource Management Techniques"};
    String[] frcsebonefriday = {"1-Cyber Forensics", "2-Project III", "3-Graph Theory and Applications", "4-Information Retrieval", "5-Resource Management Techniques", "6-Cryptography and Network Security", "7-Grid and Cloud Computing"};


    // even sem for cse c
    String[] fcsectwomonday = {"1-Digital Principal and System Desidn", "2-EVS", "3-ENGLISH", "4-OOPS", "5-ENGINEERING DRAWING", "6-ENGINEERING DRAWING", "7-ENGINEERING DRAWING"};
    String[] fcsectwotuesday ={"1-MATHEMATICS", "2-OOPS", "3-MATHEMATICS", "4-EVS", "5-ENGLISH", "6-Digital Principal and System Desidn", "7-SEMINAR"};
    String[] fcsectwowednesday = {"1-ENGLISH", "2-MATHEMATICS", "3-Digital Principal and System Desidn", "4-OOPS", "5-OOPS/Digital Principal and System Desidn LAB", "6-OOPS/Digital Principal and System Desidn LAB", "7-OOPS/Digital Principal and System Desidn LAB"};
    String[] fcsectwothursday = {"1-OOPS", "2-LIB", "3-EVS", "4-MATHEMATICS", "5-OOPS/Digital Principal and System Desidn LAB", "6-OOPS/Digital Principal and System Desidn LAB", "7-OOPS/Digital Principal and System Desidn LAB"};
    String[] fcsectwofriday = {"1-ENGINEERING DRAWING", "2-ENGINEERING DRAWING", "3-ENGINEERING DRAWING", "4-MATHEMATICS", "5-Digital Principal and System Desidn", "6-EVS", "7-ENGLISH"};

    //cse c 2nd yr
    String[] scsectwomonday = {"1-Computer networks", "2-Software/networks lab", "3-Software/networks lab", "4-Software/networks lab", "5-Database Mamagement System", "6-Computer networks", "7-PQT"};
    String[] scsectwotuesday = {"1-Database Mamagement System", "2-Software engineering", "3-Computer networks", "4-Design and analysys of algorithm", "5-Networks/Database Mamagement System lab", "6-Networks/Database Mamagement System lab", "7-Networks/Database Mamagement System lab"};
    String[] scsectwowednesday = {"1-Design and analysys of algorithm", "2-Computer Architecture", "3-Design and analysys of algorithm", "4-PQT", "5-Database Mamagement System/Software lab", "6-Database Mamagement System/Software lab", "7-Database Mamagement System/Software lab"};
    String[] scsectwothursday = {"1-PQT", "2-Computer Architecture", "3-Database Mamagement System", "4-Software engineering", "5-Design and analysys of algorithm", "6-PQT", "7-Computer Architecture"};
    String[] scsectwofriday = {"1-Software engineering", "2-Computer Architecture", "3-Database Mamagement System", "4-Software engineering", "5-Computer networks", "6-PQT", "7-Computer Architecture"};

    //cse c 3rd yr
    String[] tcsectwomonday = {"1-Machine learning", "2-AI", "3-Mobile Computing", "4-AI", "5-Mobile app development/compiler lab", "6-Mobile app development/compiler lab", "7-Mobile app development/compiler lab"};
    String[] tcsectwotuesday = {"1-AI", "2-Compiler design", "3-Digital signal proccessing", "4-Compiler design", "5-Mobile Computing", "6-Compiler design", "7-AI "};
    String[] tcsectwowednesday = {"1-Compiler design", "2-Machine learning", "3-Digital signal proccessing", "4-Compiler design", "5-Mobile Computing", "6-LIB", "7-Digital signal proccessing"};
    String[] tcsectwothursday = {"1-Digital signal proccessing", "2 -Compiler/AI lab", "3-Compiler/AI lab", "4-Compiler/AI lab", "5-Digital signal proccessing", "6-Compiler design", "7-Machine learning"};
    String[] tcsectwofriday = {"1-Compiler design", "2-Mobile app development/AI lab", "3-Mobile app development/AI lab", "4-Mobile app development/AI lab", "5-Machine learning", "6-Mobile Computing", "7-Compiler design"};

    //cse c 4th yr
    String[] frcsectwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcsectwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcsectwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcsectwothursday = {"1-Multicore architecture", "2-Professional ethics", "3-Knowledge management", "4-SEMINAR", "5-Multicore architecture", "6-Knowledge management", "7-Professional ethics"};
    String[] frcsectwofriday = {"1-Professional ethics", "2-Knowledge management", "3-Multicore architecture", "4-Knowledge management", "5-Professional ethics", "6-Multicore architecture", "7-LIB"};

    //*** odd sem for frst, second ,third and fourth sem for cse c section

    //cse c 1st year

    String[] fcseconemonday = {"1-Engineering Mathematics - I", "2-Communicative English", "3-Engineering Physics", "4-Basic Electrical and Electronics Engineering", "5-Engineering Chemistry", "6-Physics and Chemistry Laboratory", "7-Physics and Chemistry Laboratory"};
    String[] fcseconetuesday = {"1-Programming for Problem Solving", "2-Communicative English", "3-Programming for Problem Solving", "4-Basic Electrical and Electronics Engineering", "5-Engineering Mathematics - I", "6-Library", "7-Engineering Physics"};
    String[] fcseconewednesday = {"1-Engineering Practices Laboratory", "2-Engineering Practices Laboratory", "3-Engineering Practices Laboratory", "4-Engineering Mathematics - I", "5-Communicative English", "6-Programming for Problem Solving", "7-Library","8-Sports"};
    String[] fcseconethursday = {"1-Engineering Chemistry", "2-Engineering Mathematics - I", "3-Engineering Physics", "4-Basic Electrical and Electronics Engineering", "5-Programming for Problen Solving Laboratory", "6-Programming for Problen Solving Laboratory", "7-Programming for Problen Solving Laboratory"};
    String[] fcseconefriday = {"1-Basic Electrical and Electronics Engineering", "2-Engineering Chemistry", "3-Engineering Mathematics - I", "4-Engineering Physics", "5-Engineering Chemistry", "6-Communicative English", "7-Programming for Problem Solving"};

    // cse c 2nd year
    String[] scseconemonday = {"1-Microprocessor and Microcontroller", "2-Mathematics III", "3-Environmental Science and Engineering", "4-Operating Systems", "5-Microprocessor and Microcontroller Lab / Programming and Data Structures Lab II", "6-Microprocessor and Microcontroller Lab / Programming and Data Structures Lab II", "7-Microprocessor and Microcontroller Lab / Programming and Data Structures Lab II"};
    String[] scseconetuesday = {"1-Programming and Data Structures II", "2-Operating Systems", "3-Analog and Digital Communication", "4-Library", "5-Mathematics III", "6-Microprocessor and Microcontroller", "7-Environmental Science and Engineering"};
    String[] scseconewednesday = {"1-Environmental Science and Engineering", "2-Programming and Data Structures Lab II / Operating Systems Lab", "3-Programming and Data Structures Lab II / Operating Systems Lab", "4-Programming and Data Structures Lab II / Operating Systems Lab", "5-Mathematics III", "6-Analog and Digital Communication", "7-Programming and Data Structures II"};
    String[] scseconethursday = {"1-Operating Systems", "2-Microprocessor and Microcontroller", "3-Programming and Data Structures II", "4-Mathematics III", "5-Programming and Data Structures II", "6-Analog and Digital Communication", "7-Microprocessor and Microcontroller"};
    String[] scseconefriday = {"1-Analog and Digital Communication", "2-Mathematics III", "3-Operating Systems", "4-Environmental Science and Engineering", "5-Operating Systems Lab / Microprocessor and Microcontroller Lab", "6-Operating Systems Lab / Microprocessor and Microcontroller Lab", "7-Operating Systems Lab / Microprocessor and Microcontroller Lab"};

    //cse c 3rd yr
    String[] tcseconemonday = {"1-Object Oriented Analysis and Design", "2-Internet Programming Lab / Computer Graphics Lab", "3-Internet Programming Lab / Computer Graphics Lab", "4-Internet Programming Lab / Computer Graphics Lab", "5-Theory of Computation", "6-Computer Graphics", "7-Seminar I"};
    String[] tcseconetuesday = {"1-Computer Graphics", "2-Discrete Mathematics", "3-Object Oriented Analysis and Design", "4-Internet Programming", "5-Computer Graphics Lab / Internet Programming Lab", "6-Computer Graphics Lab / Internet Programming Lab", "7-Computer Graphics Lab / Internet Programming Lab"};
    String[] tcseconewednesday = {"1-Interview and Career Skills Lab", "2-Interview and Career Skills Lab", "3-Interview and Career Skills Lab", "4-Interview and Career Skills Lab", "5-Discrete Mathematics", "6-Theory of Computation", "7-Internet Programming"};
    String[] tcseconethursday = {"1-Internet Programming", "2-Theory of Computation", "3-Library", "4-Internet Programming(T)", "5-Discrete Mathematics", "6-Object Oriented Analysis and Design", "7-Computer Graphics"};
    String[] tcseconefriday = {"1-Discrete Mathematics", "2-Internet Programming", "3-Computer Graphics", "4-Theory of Computation", "5-Seminar II", "6-Discrete Mathematics", "7-Object Oriented Analysis and Design"};

//cse c 4th yr

    String[] frcseconemonday = {"1-Grid and Cloud Computing", "2-Graph Theory and Applications", "3-Data Analytics", "4-Seminar", "5-Adhoc and Sensor Networks", "6-Cryptography and Network Security", "7-Resource Management Techniques"};
    String[] frcseconetuesday = {"1-Adhoc and Sensor Networks", "2-Cryptography and Network Security", "3-Project I", "4-Grid and Cloud Computing", "5-Data Analytics", "6-Resource Management Techniques", "7-Graph Theory and Applications"};
    String[] frcseconewednesday = {"1-Cryptography and Network Security", "2-Resource Management Techniques", "3-Grid and Cloud Computing", "4-Adhoc and Sensor Networks", "5-Security Lab / Grid and Cloud Computing Lab", "6-Security Lab / Grid and Cloud Computing Lab", "7-Security Lab / Grid and Cloud Computing Lab"};
    String[] frcseconethursday = {"1-Graph Theory and Applications", "2-Adhoc and Sensor Networks", "3-Project II", "4-Data Analytics", "5-Grid and Cloud Computing Lab / Security Lab", "6-Grid and Cloud Computing Lab / Security Lab", "7-Grid and Cloud Computing Lab / Security Lab"};
    String[] frcseconefriday = {"1-Resource Management Techniques", "2-Data Analytics", "3-Graph Theory and Applications", "4-Project III", "5-Cryptography and Network Security", "6-Library", "7-Grid and Cloud Computing"};


    //*** even sem ece a section
    //ece a 1st yr
    String[] feceatwomonday = {"1-Electron devices and electrical machines lab", "2-Electron devices and electrical machines lab", "3-Electron devices and electrical machines lab", "4-Electron devices and electrical machines lab", "5-Mathematics II", "6-Electron devices", "7-Programming for problem solving"};
    String[] feceatwotuesday = {"1-Electron devices", "2-Mathematics II", "3-Technical english", "4-EVS", "5-Programming for problem solving", "6-Physics of materials", "7-SEM"};
    String[] feceatwowednesday ={"1-Physics of materials", "2-Mathematics II", "3-EVS", "4-Electron devices", "5-Programming for problem solving lab", "6-Programming for problem solving lab", "7-Programming for problem solving lab"};
    String[] feceatwothursday = {"1-Programming for problem solving", "2-Electron devices", "3-", "4-Physics of materials", "5-Mathematics II", "6-EVS", "7-Technical english"};
    String[] feceatwofriday = {"1-EVS", "2-Technical english", "3-Physics of materials", "4-Mathematics II", "5-Programming for problem solving", "6-Technical english", "7-Electron devices"};

    //ece a 2nd yr
    String[] seceatwomonday = {"1-Probability and Random Process", "2-Linear Integrated Circuits", "3-Electronic Circuits II", "4-Control System Engineering", "5-Library", "6-Probability and Random Process", "7-Signals and Systems(T)"};
    String[] seceatwotuesday = {"1-Electronic Circuits II", "2-Analog and Communication Systems", "3-Linear Integrated Circuits", "4-Signals and Systems", "5-Linear Integrated Circuits", "6-Signals and Systems", "7-Control System Engineering(T)"};
    String[] seceatwowednesday = {"1-Analog and Communication Systems", "2-Control System Engineering", "3-Linear Integrated Circuits", "4-Signals and Systems", "5-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "6-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "7-Circuits and Simulation Lab/Electrical Engineering and Control System Lab"};
    String[] seceatwothursday = {"1-Control System Engineering", "2-Electronic Circuits II", "3-Probability and Random Process", "4-Linear Integrated Circuits", "5-Analog and Communication Systems", "6-Electronic Circuits II", "7-Linear Integrated Circuits(T)"};
    String[] seceatwofriday = {"1-", "2-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "3-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "4-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "5-Probability and Random Process", "6-Control System Engineering", "7-Analog and Communication Systems"};

    //ece a 3rd yr
    String[] teceatwomonday = {"1-Interview and Career Skills Lab", "2-Interview and Career Skills Lab", "3-Interview and Career Skills Lab", "4-Interview and Career Skills Lab", "5-Digital Image Processing", "6-Computer Networks", "7-VLSI Design"};
    String[] teceatwotuesday = {"1-Computer Networks", "2-Computer Architecture", "3-Antenna and Wave Propagation", "4-Digital Image Processing", "5-Computer Networks", "6-Computer Architecture", "7-Principles of Management"};
    String[] teceatwowednesday = {"1-Principles of Management", "2-Principles of Management", "3-Computer Architecture", "4-Antenna and Wave Propagation", "5-VLSI Design Lab/Computer Networks Lab", "6-VLSI Design Lab/Computer Networks Lab", "7-VLSI Design Lab/Computer Networks Lab"};
    String[] teceatwothursday = {"1-Antenna and Wave Propagation", "2-Principles of Management", "3-Computer Architecture", "4-VLSI Design", "5-VLSI Design Lab/Computer Networks Lab", "6-VLSI Design Lab/Computer Networks Lab", "7-VLSI Design Lab/Computer Networks Lab"};
    String[] teceatwofriday = {"1-VLSI Design", "2-Digital Image Processing", "3-Computer Networks", "4-Computer Architecture", "5-Antenna and Wave Propagation", "6-Mini Project", "7-Mini Project"};


    //ece a 4th year
    String[] freceatwomonday={"1-Total Quality Management", "2-Professional Ethics in Enginering", "3-Wireless Communication", "4-Library", "5-Wireless Network", "6-Project(1)", "7-Total Quality Management"};
    String[] freceatwotuesday={"1-Wireless Network", "2-Wireless Communication", "3-Professional Ethics in Enginering", "4-Project(2)", "5-Total Quality Management", "6-Project(3)", "7-"};
    String[] freceatwowednesday={"1-Wireless Communication", "2-Wireless Network", "3-Total Quality Management", "4-Project(4)", "5-Professional Ethics in Enginering", "6-Wireless Network", "7-Wireless Communication"};
    String[] freceatwothursday={"1-Project work","2-Project work","3-Project work","4-Project work","5-Project work","6-Project work","7-Project work"};
    String[] freceatwofriday={"1-Project work","2-Project work","3-Project work","4-Project work","5-Project work","6-Project work","7-Project work"};


    // ****odd sem for first,second year,third year and fourth year for ece a section***

    String[] feceaonemonday = {"1-Engineering Drawing", "2-Engineering Drawing", "3-Engineering Drawing", "4-Engineering Chemistry", "5-Communicative English", "6-Engineering Physics", "7-Seminar I"};
    String[] feceaonetuesday = {"1-Engineering Mathematics - I", "2-Engineering Physics", "3-Engineering Chemistry", "4-Seminar II", "5-Engineering Drawing", "6-Engineering Drawing", "7-Engineering Drawing"};
    String[] feceaonewednesday = {"1-Basic Electrical Engineering", "2-Communicative English", "3-Engineering Mathematics - I", "4-Engineering Physics", "5-Communicative English", "6-Basic Electrical Engineering", "7-Engineering Mathematics - I"};
    String[] feceaonethursay = {"1-Engineering Practices Laboratory", "2-Engineering Practices Laboratory", "3-Engineering Practices Laboratory", "4-Engineering Mathematics - I", "5-Basic Electrical Engineering", "6-Communicative English", "7-Library"};
    String[] feceaonefriday = {"1-Engineering Chemistry", "2-Basic Electrical Engineering", "3-Engineering Chemistry", "4-Engineering Physics", "5-Engineering Mathematics - I", "6-Physics and Chemistry Laboratory", "7-Physics and Chemistry Laboratory"};



    String[] seceaonemonday = {"1-Mathematics III", "2-Electromagnetic Fields", "3-Digital Electronics", "4-Electronic Circuits I", "5-Mathematics III", "6-Programming and Data Structures", "7-Electrical Engineering and Instrumentation"};
    String[] seceaonetuesday = {"1-Electromagnetic Fields", "2-Digital Electronics", "3-Electronic Circuits I", "4-Mathematics III", "5-Analog Circuits Lab / Programming and Data Structures Lab", "6-Analog Circuits Lab / Programming and Data Structures Lab", "7-Analog Circuits Lab / Programming and Data Structures Lab"};
    String[] seceaonewednesday = {"1-Digital Electronics", "2-Programming and Data Structures", "3-Mathematics III", "4-Electrical Engineering and Instrumentation", "5-Electronic Circuits I", "6-Electromagnetic Fields", "7-Digital Electronics"};
    String[] seceaonethursday = {"Programming and Data Structures", "2-Digital Electronics Lab / Analog Circuits Lab", "3-Digital Electronics Lab / Analog Circuits Lab", "4-Digital Electronics Lab / Analog Circuits Lab", "5-Electromagnetic Fields", "6-Electrical Engineering and Instrumentation", "7-Mathematics III"};
    String[] seceaonefriday = {"1-Electrical Engineering and Instrumentation", "2-Digital Electronics Lab / Programming and Data Structures Lab", "3-Digital Electronics Lab / Programming and Data Structures Lab", "4-Digital Electronics Lab / Programming and Data Structures Lab", "5-Electromagnetic Fields(T) / Library", "6-Electronic Circuits I", "7-Programming and Data Structures"};

    //ece a third yr

    String[] teceaonemonday = {"1-Digital Communication", "2-Digital Signal Processing Lab / Microprocessor and Microcontroller Lab", "3-Digital Signal Processing Lab / Microprocessor and Microcontroller Labb", "4-Digital Signal Processing Lab / Microprocessor and Microcontroller Lab", "5-Medical Electronics / Robotics and Automation", "6-Microprocessor and Microcontroller", "7-Environmental Science and Engineering"};
    String[] teceaonetuesday = {"1-Principles of Digital Signal Processing", "2-Medical Electronics / Robotics and Automation", "3-Environmental Science and Engineering", "4-Transmission Lines and Waveguides", "5-Principles of Digital Signal Processing", "6-Microprocessor and Microcontroller", "7-Digital Communication"};
    String[] teceaonewednesday = {"1-Medical Electronics / Robotics and Automation", "2-Microprocessor and Microcontroller Lab / Communication System Lab", "3-Microprocessor and Microcontroller Lab / Communication System Lab", "4-Microprocessor and Microcontroller Lab / Communication System Lab", "5-Digital Communication", "6-Principles of Digital Signal Processing(T)", "7-Transmission Lines and Waveguides"};
    String[] teceaonethursday = {"1-Microprocessor and Microcontroller", "2-Transmission Lines and Waveguides", "3-Principles of Digital Signal Processing", "4-Environmental Science and Engineering", "5-Digital Signal Processing Lab / Communication System Lab", "6-Digital Signal Processing Lab / Communication System Lab", "7-Digital Signal Processing Lab / Communication System Lab"};
    String[] teceaonefriday = {"1-Environmental Science and Engineering", "2-Microprocessor and Microcontroller", "3-Transmission Lines and Waveguides(T) / Library", "4-Principles of Digital Signal Processing", "5-Digital Communication", "6-Principles of Digital Signal Processing", "7-Medical Electronics / Robotics and Automation"};

// ece a fourth year

    String[] freceaonemonday = {"1-Embedded and Real Time Systems", "2-Satellite Communication / Digital Image Processing", "3-RF and Microwave Engineering", "4-Advanced Computer Architecture", "5-Library", "6-Optical Communication and Networks", "7-Advanced Microprocessors and Microcontrollers"};
    String[] freceaonetuesday = {"1-Advanced Microprocessors and Microcontrollers", "2-Advanced Computer Architecture", "3-Optical Communication and Networks", "4-Satellite Communication / Digital Image Processing", "5-Seminar I", "6-RF and Microwave Engineering", "7-Embedded and Real Time Systems"};
    String[] freceaonewednesday = {"1-Embedded Lab / Optical and Microwave Lab", "2-Embedded Lab / Optical and Microwave Lab", "3-Embedded Lab / Optical and Microwave Lab", "4-Optical Communication and Networks", "5-Embedded and Real Time Systems", "6-Advanced Microprocessors and Microcontrollers", "7-Seminar II"};
    String[] freceaonethursday = {"1-RF and Microwave Engineering", "2-Seminar III", "3-Advanced Computer Architecture", "4-Satellite Communication / Digital Image Processing", "5-Embedded Lab / Optical and Microwave Lab", "6-Embedded Lab / Optical and Microwave Lab", "7-Embedded Lab / Optical and Microwave Lab"};
    String[] freceaonefriday = {"1-Satellite Communication / Digital Image Processing", "2-Optical Communication and Networks", "3-Advanced Microprocessors and Microcontrollers", "4-Embedded and Real Time Systems", "5-Seminar IV", "6-Advanced Computer Architecture", "7-RF and Microwave Engineering"};


    // even sem for ece b section

    //ece b 1st year
    String[] fecebtwomonday={"1-Electron devices", "2-Technical english", "3-EVS", "4-Mathematics II", "5-Physics of materials", "6-Electron devices", "7-Programming for problem solving"};
    String[] fecebtwotuesday={"1-Mathematics II", "2-EVS", "3-Electron devices", "4-Programming for problem solving", "5-Mathematics II", "6-Physics of materials", "7-Technical english"};
    String[] fecebtwowednesday={"1-Programming for problem solving", "2-Electron devices and electrical machines lab", "3-Electron devices and electrical machines lab", "4-Electron devices", "5-EVS", "6-Electron devices", "7-Mathematics II"};
    String[] fecebtwothursday={"1-Technical english", "2-Physics of materials", "3-LIB", "4-EVS", "5-Programming lab", "6-Programming lab", "7-Programming lab"};
    String[] fecebtwofriday={"1-Physics of materials", "2-Electron devices and electrical machines lab", "3-Electron devices and electrical machines lab", "4-Mathematics II", "5-Technical english", "6-Programming for problem solving", "7-SEM"};

    //ece b 2nd yr
    String[] secebtwomonday = {"1-Control System Engineering", "2-Signals and Systems", "3-Linear Integrated Circuits", "4-Control System Engineering", "5-Electronic Circuits II", "6-Signals and Systems", "7-Analog and Communication Systems"};
    String[] secebtwotuesday = {"1-Probability and Random Process", "2-Analog and Communication Systems", "3-Electronic Circuits II", "4-Signals and Systems", "5-Probability and Random Process", "6-Control System Engineering", "7-Linear Integrated Circuits(T)"};
    String[] secebtwowednesday = {"1-Linear Integrated Circuits", "2-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "3-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "4-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "5-Linear Integrated Circuits", "6-Probability and Random Process", "7-Electronic Circuits II"};
    String[] secebtwothursday = {"1-Analog and Communication Systems", "2-Linear Integrated Circuits", "3-Signals and Systems", "4-Probability and Random Process", "5-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "6-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "7-Circuits and Simulation Lab/Electrical Engineering and Control System Lab"};
    String[] secebtwofriday = {"1-Electronic Circuits II", "2-Control System Engineering", "3-Probability and Random Process", "4-Analog and Communication Systems", "5-Control System Engineering(T)", "6-Library", "7-Signals and Systems(T)"};

    //ece b 3rd yr
    String[] tecebtwomonday = {"1-Principles of Management", "2-Digital Image Processing", "3-VLSI Design", "4-Computer Networks", "5-VLSI Design Lab/Computer Networks Lab", "6-VLSI Design Lab/Computer Networks Lab", "7-VLSI Design Lab/Computer Networks Lab"};
    String[] tecebtwotuesday = {"1-Computer Architecture", "2-VLSI Design", "3-Digital Image Processing", "4-Computer Architecture", "5-Computer Networks", "6-Mini Project", "7-Mini Project"};
    String[] tecebtwowednesday = {"1-Interview and Career Skills Lab", "2-Interview and Career Skills Lab", "3-Interview and Career Skills Lab", "4-Interview and Career Skills Lab", "5-VLSI Design", "6-Computer Architecture", "7-Antenna and Wave Propagation"};
    String[] tecebtwothursday = {"1-Computer Networks", "2-Antenna and Wave Propagation", "3-Principles of Management", "4-Digital Image Processing", "5-Computer Architecture", "6-Antenna and Wave Propagation", "7-VLSI Design"};
    String[] tecebtwofriday = {"1-Antenna and Wave Propagation", "2-VLSI Design Lab/Computer Networks Lab", "3-VLSI Design Lab/Computer Networks Lab", "4-VLSI Design Lab/Computer Networks Lab", "5-Computer Networks", "6-Digital Image Processing", "7-Principles of Management"};

    //ece b 4th yr
    String[] frecebtwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frecebtwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frecebtwowednesday = {"1-Wireless Communication", "2-Professional Ethics in Enginering", "3-Wireless Communication", "4-Project(1)", "5-Total Quality Management", "6-Library", "7-Wireless Network"};
    String[] frecebtwothursday = {"1-Professional Ethics in Enginering", "2-Total Quality Management", "3-Wireless Network", "4-Wireless Communication", "5-Project(2)", "6-Total Quality Management", "7-Professional Ethics in Enginering"};
    String[] frecebtwofriday = {"1-Total Quality Management", "2-Wireless Network", "3-Project(3)", "4-Wireless Network", "5-Project(4)", "6-Professional Ethics in Enginering", "7-Wireless Communication"};


    //ece b odd sem


    // ece b frst yr
    String[] fecebonemonday = {"1.Engineering Chemistry I", "2.Mathematics I", "3.Communicative English", "4.Engineering Physics I", "5.Engineering Graphics", "6.Engineering Graphics", "7.Engineering Graphics"};
    String[] fecebonetuesday = {"1.Engineering Practices Lab", "2.Engineering Practices Lab", "3.Engineering Practices Lab", "4.Basic Electrical Engineering", "5.Engineering Physics", "6.Mathematics I", "7.Communicative English","8.Sports"};
    String[] fecebonewednesday = {"1.Basic Electrical Engineering", "2.Engineering Chemistry I", "3.Mathematics I", "4.Engineering Physics I", "5.Communicative English", "6.Physics and Chemistry Lab", "7.Physics and Chemistry Lab"};
    String[] fecebonethursday = {"1.Mathematics I", "2.Basic Electrical Engineering", "3.Engineering Chemistry I", "4.Basic Electrical Engineering", "5.Engineering Chemistry I", "6.:Library", "7.Seminar I"};
    String[] fecebonefriday = {"1-Engineering Drawing", "2-Engineering Drawing", "3-Engineering Drawing", "4-Mathematics I", "5-Engineering Physics I", "6-Communicative English", "7-Seminar II"};

    //ece b 2nd yr
    String[] secebonemonday = {"1-Electrical Engineering and Instrumentation", "2-Digital Electronic Laboratory/Analog Circuits laboratory", "3-Digital Electronic Laboratory/Analog Circuits laboratory", "4-Digital Electronic LAboratory/Analog Circuits laboratory", "5-Electromagnetic Fields", "6-Programming and Data Structures", "7-Electronic Circuits- I"};
    String[] secebonetuesday = {"1-Electronic Circuits -I", "2-Digital Electronic Laboratory/Programming and Data Structures Lab", "3-Digital Electronic Laboratory/Programming and Data Structures Lab", "4-Digital Electronic Laboratory/Programming and Data Structures Lab", "5-Digital Electronics", "6-Electrical Engineering and Instrumentation", "7-Mathematics -III"};
    String[] secebonewednesday = {"1-Programming and Data Structures", "2-Mathematics III", "3-Digital Electronics", "4-Electronic Circuits I", "5-Electrical Engineering and Instrumentation", "6-Mathematics III", "7-Electromagnetic Fields"};
    String[] secebonethursday = {"1-Electromagnetic Fields", "2-Digital Electronics", "3-Programming and Data Structures", "4-Mathematics III", "5-Electromagnetic field", "6-Electronic Circuits -I", "7-Programming and Data Structures"};
    String[] secebonefriday = {"1-Mathematics -III", "2-Electrical Engineering and Instrumentation", "3-Digital Electronics", "4-Electromagnetic Fields(T)/ Library", "5- Analog Circuits lab/Programming and Data Structures lab", "6-Analog Circuits lab/Programming and Data Structures lab", "7- Analog Circuits lab/Programming and Data Structures lab"};

    //ece b 3rd yr
    String[] tecebonemonday = {"1-Environmental Science and Engineering", "2-Principles of Digital Signal Processing", "3-Microprocessor and Microcontroller", "4-Transmission Lines and Waveguides", "5-Medical Electronics/ Robotics and Automation(Elective-I)", "6-Digital Communication", "7-Environmental Science and Engineering)"};
    String[] tecebonetuesday = {"1-Transmission Lines and Waveguides", "2-Medical Electronics/ Robotics and Automation(Elective-I)", "3-Digital Communication", "4-Microprocessor and Microcontroller", "5-Communication System lab/Microprocessor and Microcontroller lab", "6-Communication System lab/Microprocessor and Microcontroller lab", "7-Communication System lab/Microprocessor and Microcontroller lab"};
    String[] tecebonewednesday = {"1-Medical Electronics/ Robotics and Automation(Elective-I)", "2-Transmission Lines and Waveguides", "3-Principles of Digital Signal Processing", "4-Environmental Science and Engineering", "5-Digital Signal Processing Lab/ Microprocessor Microcontroller Lab", "6-Digital Signal Processing Lab/ Microprocessor Microcontroller Lab", "7-Digital Signal Processing Lab/ Microprocessor Microcontroller Lab"};
    String[] tecebonethursday = {"1-Principles of Digital Signal Processing", "2-Microprocessor and Microcontroller", "3-Environmental Science and Engineering", "4-Principles of Digital Signal Processing(T)", "5-Transmission Lines and Waveguides(T)/Library","6-Digital Communication", "7-Transmission Lines and Waveguides"};
    String[] tecebonefriday = {"1-Digital Communication", "2-Communication System lab/Digital Signal Processing lab", "3-Communication System lab/Digital Signal Processing lab", "4-Communication System lab/Digital Signal Processing lab", "5-Microprocessor Microcontroller", "6-Principles of Digital Signal Processing", "7-Medical Electronics/ Robotics and Automation(Elective-I)"};

//ece b 4th yr

    String[] frecebonemonday = {"1-Embedded and Real Time Systems", "2-SEM -I", "3-RF and Microwave Engineering", "4-Optical Communication and Networks", "5-SEM -II", "6-Speech Processing (Elective-III)", "7-Cognitive Radio(Elective-IV)"};
    String[] frecebonetuesday = {"1-Optical Communication and Networks", "2-Embedded and Real Time Systems", "3-SEM -III", "4-Cognitive Radio (Elective-IV)", "5-RF and Microwave Engineering", "6-Satellite Communication(Elective-I)", "7-Speech Processing (Elective-III)"};
    String[] frecebonewednesday = {"1-RF and Microwave Engineering", "2-Cognitive Radio (Elective-IV)", "3-Satellite Communication (Elective-II)", "4-Speech Processing (Elective-III)", "5-Embedded lab/Optical and Microwave lab", "6-Embedded lab/Optical and Microwave lab", "7-Embedded lab/Optical and Microwave lab"};
    String[] frecebonethursday = {"1-Speech Processing (Elective-III)", "2-SEM -IV", "3-Cognitive Radio (Elective-IV)", "4-Library", "5-Embedded and Real Time Systems", "6-Optical Communication and Networks", "7-Satellite Communication(Elective-I)"};
    String[] frecebonefriday = {"1-Embedded lab/Optical and Microwave lab", "2-Embedded lab/Optical and Microwave lab", "3-Embedded lab/Optical and Microwave lab", "4-Satellite Communication(Elective-I)", "5-Optical Communication and Networks", "6-Embedded and Real Time Systems", "7-RF and Microwave Engineering"};



    //ece c even
    //ece c 1st yr
    String[] fecectwomonday={"1-Programming for Problem Solving Lab", "2-Programming for Problem Solving Lab", "3-Programming for Problem Solving Lab", "4-Technical English", "5-Electron Devices", "6-Physics of Materials", "7-Programming for Problem Solving"};
    String[] fecectwotuesday = {"1-Physics of Materials", "2-Technical English", "3-Programming for Problem Solving", "4-Electron Devices", "5-Environmental Science and Engineering", "6-Engineering Mathematics II", "7-Seminar"};
    String[] fecectwowednesday = {"1-Technical English", "2-Electron Devices", "3-Engineering Mathematics II", "4-Physics of Materials", "5-Environmental Science and Engineering", "6-Library", "7-Electron Devices"};
    String[] fecectwothursday = {"1-Electron Devices and Electrical Machines Lab", "2-Electron Devices and Electrical Machines Lab", "3-Electron Devices and Electrical Machines Lab", "4-Electron Devices and Electrical Machines Lab", "5-Engineering Mathematics II", "6-Physics of Materials", "7-Electron Devices(T)"};
    String[] fecectwofriday = {"1-Environmental Science and Engineering", "2-Programming for Problem Solving", "3-Engineering Mathematics II", "4-Technical English", "5-Environmental Science and Engineering", "6-Programming for Problem Solving", "7-Engineering Mathematics II"};

    // ece c 2nd year
    String[] secectwomonday={"1-Linear Integrated Circuits", "2-Probability and Random Process", "3-Control System Engineering", "4-Signals and Systems", "5-Analog and Communication Systems", "6-Electronic Circuits II", "7-Probability and Random Process"};
    String[] secectwotuesday={"1-Probability and Random Process", "2-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "3-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "4-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "5-Linear Integrated Circuits", "6-Signals and Systems", "7-Analog and Communication Systems"};
    String[] secectwowednesday={"1-Control System Engineering", "2-Linear Integrated Circuits", "3-Signals and Systems", "4-Probability and Random Process", "5-Signals and Systems(T)", "6-Control System Engineering(T)", "7-Electronic Circuits II"};
    String[] secectwothursday={"1-Analog and Communication Systems", "2-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "3-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "4-Circuits and Simulation Lab/Electrical Engineering and Control System Lab", "5-Electronic Circuits II", "6-Linear Integrated Circuits", "7-Control System Engineering"};
    String[] secectwofriday={"1-Signals and Systems", "2-Electronic Circuits II", "3-Analog and Communication Systems", "4-Library", "5-Control System Engineering", "6-Probability and Random Process", "7-Linear Integrated Circuits(T)"};

    //ece c 3rd yr
    String[] tecectwomonday = {"1-Antenna and Wave Propagation", "2-Computer Networks", "3-Principles of Management", "4-Computer Architecture", "5-Digital Image Processing", "6-Mini Project", "7-Mini Project"};
    String[] tecectwotuesday = {"1-Computer Architecture", "2-VLSI Design", "3-Computer Architecture", "4-Antenna and Wave Propagation", "5-VLSI Design Lab/Computer Networks Lab", "6-VLSI Design Lab/Computer Networks Lab", "7-VLSI Design Lab/Computer Networks Lab"};
    String[] tecectwowednesday = {"1-VLSI Design", "2-Antenna and Wave Propagation", "3-Digital Image Processing", "4-Computer Networks", "5-VLSI Design", "6-Principles of Management", "7-Antenna and Wave Propagation"};
    String[] tecectwothursday = {"1-Interview and Career Skills Lab", "2-Interview and Career Skills Lab", "3-Interview and Career Skills Lab", "4-Interview and Career Skills Lab", "5-VLSI Design", "6-Principles of Management", "7-Antenna and Wave Propagation"};
    String[] tecectwofriday = {"1-Computer Networks", "2-Digital Image Processing", "3-VLSI Design", "4-Computer Architecture", "5-VLSI Design Lab/Computer Networks Lab", "6-VLSI Design Lab/Computer Networks Lab", "7-VLSI Design Lab/Computer Networks Lab"};

    //ece c 4th yr
    String[] frecectwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frecectwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frecectwowednesday = {"1-Professional Ethics in Engineering", "2-Wireless Networks", "3-Wireless Communication", "4-Total Quality Management", "5-Project(1)", "6-Wireless Networks", "7-Total Quality Management"};
    String[] frecectwothursday = {"1-Total Quality Management", "2-Wireless Communication", "3-Professional Ethics in Engineering", "4-Library", "5-Wireless Networks", "6-Project(2)", "7-Wireless Communication"};
    String[] frecectwofriday = {"1-Wireless Communication", "2-Project(3)", "3-Wireless Networks", "4-Professional Ethics in Engineering", "5-Project(4)", "6-Total Quality Management", "7-Professional Ethics in Engineering"};

    //ece c odd sem
    //ece c 1st yr
    String[] fececonemonday = {"1.Engineering Drawing", "2.Engineering Drawing", "3.Engineering Drawing", "4.Engineering Chemistry I", "5. Engineering Physics I", "6.Technical English 1", "7..Mathematics 1"};
    String[] fececonetuesday = {"1.Engineering Physics I", "2.Mathematics 1", "3.Seminar I", "4.Basic Electrical Engineering", "5.Engineering Drawing", "6.Engineering Drawing", "7.Engineering Drawing"};
    String[] fececonewednesday = {"1.Communicative English", "2.Engineering Physics I", "3.Engineering Chemistry I", "4.Mathematics I", "5.Communicative English", "6.Basic Electrical Engineering", "7.Seminar 2","8.Sports"};
    String[] fececonethursday = {"1.Mathematics 1", "2.Engineering Chemistry", "3.Basic Electrical Engineering", "4.Engineering Physics", "5.Engineering Practices Laboratory", "6.Engineering Practices Laboratory", "7.Engineering Practices Laboratory"};
    String[] fececonefriday = {"1.Basic Electrical Engineering", "2.Physics and Chemistry Laboratory", "3.Physics and Chemistry Laboratory", "4.Mathematics I", "5.Engineering Chemistry", "6.Communiactive English", "7.Library"};

    // ece c 2nd yr
    String[] sececonemonday = {"1-Electromagnetic Fields", "2-Programming and Data Structures", "3-Electrical Engineering and Instrumentation", "4-Electromagnetic Fields(T)/ Library", "5-Mathematics III", "6-Digital Electronics", "7-Electronic Circuits I"};
    String[] sececonetuesday = {"1-Electrical Engineering and Instrumentation", "2-Digital Electronics lab/Analog Circuits lab", "3-Digital Electronics lab/Analog Circuits lab", "4-Digital Electronics lab/Analog Circuits lab", "5-Electromagnetic Fields", "6-Electronic Circuits -I", "7-Programming and Data Structures"};
    String[] sececonewednesday = {"1-Electronic Circuits I", "2-Electromagnetic Fields", "3-Digital Electronics", "4-Mathematics III", "5-Analog Circuits lab/Programming and Data Structures", "6-Analog Circuits lab/Programming and Data Structures", "7-Analog Circuits lab/Programming and Data Structures"};
    String[] sececonethursday = {"1-Programming and Data Structures", "2-Digital Electronics", "3-Mathematics III", "4-Electrical Engineering and Instrumentation", "5-Digital Electronics lab/Programming and Data Structures Lab", "6-Digital Electronics lab/Programming and Data Structures Lab", "7-Digital Electronics lab/Programming and Data Structures Lab"};
    String[] sececonefriday = {"1-Mathematics -III", "2-Electronic Circuits I", "3-Electromagnetic Fields", "4-Programming and Data Structures", "5-Digital Electronics", "6-Mathematics III", "7-Electrical Engineering and Instrumentation"};

    //ece c 3rd yr
    String[] tececonemonday = {"1-Digital Communication", "2-Transmission Lines and Waveguides", "3-Medical Electronics (E-I)", "4-Microprocessor and Microcontroller", "5-Communication System lab/Microprocessor and Microcontroller lab", "6-Communication System lab/Microprocessor and Microcontroller lab", "7-Communication System lab/Microprocessor and Microcontroller lab"};
    String[] tececonetuesday = {"1-Environmental Science and Engineering", "2-Transmission Lines and Waveguides(T)/Library", "3-Microprocessor and Microcontroller", "4-Digital Communication", "5-Principles of Digital Signal Processing", "6-Transmission Lines and Waveguides", "7-Environmental Science and Engineering"};
    String[] tececonewednesday = {"1-Principles of Digital Signal Processing", "2-Medical Electronics (E-I)", "3-Transmission Lines and Waveguides", "4-Environmental Science and Engineering", "5-Digital Communication", "6-Principles of Digital Signal Processing(T)", "7-Microprocessor and Microcontroller"};
    String[] tececonethursday = {"1-Medical Electronics (E-I)", "2-Digital Signal Processing lab/Communication System lab", "3-Digital Signal Processing lab/Communication System lab", "4-Digital Signal Processing lab/Communication System lab", "5-Environmental Science and Engineering", "6-Principles of Digital Signal Processing", "7-Transmission Lines and Waveguides (Tutorial)"};
    String[] tececonefriday = {"1-Microprocessor and Microcontroller", "2-Digital Communication", "3-Principles of Digital Signal Processing", "4-Medical Electronics (E-I)", "5-Digital Signal Processing lab/Microprocessor and Microcontroller lab", "6-Digital Signal Processing lab/Microprocessor and Microcontroller lab", "7-Digital Signal Processing lab/Microprocessor and Microcontroller lab"};

    //ece c 4th yr
    String[] frececonemonday = {"1-Advanced Computer Architecture(E-III)", "2-Satellite Communication/Digital Image Processing(E-II)", "3-RF and Microwave Engineering", "4-SEM -I", "5-Advanced Microprocessors and Microcontrollers (E-IV)", "6-Embedded and Real Time Systems", "7-SEM -II"};
    String[] frececonetuesday = {"1-Optical Communication and Networks", "2-Advanced Microprocessors and Microcontrollers (E-IV)", "3-Advanced Computer Architecture(E-III)", "4-Satellite Communication/Digital Image Processing(E-II)", "5-RF and Microwave Engineering", "6-Library", "7-Embedded and Real Time Systems"};
    String[] frececonewednesday = {"1-Advanced Microprocessors and Microcontrollers (E-IV)", "2-Embedded and Real Time Systems", "3-SEM -III", "4-Advanced Computer Architecture(E-III)", "5-SEM -IV", "6-RF and Microwave Engineering", "7-Optical Communication and Networks"};
    String[] frececonethursday = {"1-Embedded Lab/ Optical and Microwave Lab", "2-Embedded Lab/ Optical and Microwave Lab", "3-Embedded Lab/ Optical and Microwave Lab", "4-Advanced Computer Architecture", "5-Library", "6-Embedded and Real Time Systems", "7-SEM 3"};
    String[] frececonefriday = {"1-Satellite Communication/Digital Image Processing(E-II)", "2-RF and Microwave Engineering", "3-Optical Communication and Networks", "4-Embedded and Real Time Systems", "5-Embedded Lab/ Optical and Microwave Lab", "6-Embedded Lab/ Optical and Microwave Lab", "7-Embedded Lab/ Optical and Microwave Lab"};

    //even sem eee a full
    //eee a 1st yr
    String[] feeeatwomonday = {"1-Environmental Science and Engineering", "2-Electric Circuit Analysis", "3-Physics of Materials", "4-Engineering Mathematics II", "5-Electric Circuit Lab", "6-Electric Circuit Lab", "7-Electric Circuit Lab"};
    String[] feeeatwotuesday = {"1-Engineering Drawing", "2-Engineering Drawing", "3-Engineering Drawing", "4-Technical English", "5-Engineering Mathematics II", "6-Electric Circuit Analysis", "7-Environmental Science and Engineering"};
    String[] feeeatwowednesday = {"1-Engineering Mathematics II", "2-Physics of Materials", "3-Environmental Science and Engineering", "4-Seminar", "5-Engineering Drawing", "6-Engineering Drawing", "7-Engineering Drawing"};
    String[] feeeatwothursday = {"1-Technical English", "2-Environmental Science and Engineering", "3-Electric Circuit Analysis", "4-Engineering Mathematics II", "5-Electric Circuit Analysis", "6-Technical English", "7-Physics of Materials"};
    String[] feeeatwofriday = {"1-Electric Circuit Analysis", "2-Physics of Materials", "3-Engineering Mathematics II", "4-Library", "5-Technical English", "6-Physics and Chemistry Lab", "7-Physics and Chemistry Lab"};

    //eee a 2nd yr
    String[] seeeatwomonday = {"1-Electrical Machines II", "2-Digital and Analog Circuits Lab/Electrical Machines II", "3-Digital and Analog Circuits Lab/Electrical Machines II", "4-Digital and Analog Circuits Lab/Electrical Machines II", "5-Analog Circuits", "6-Computational Method", "7-Elecric Power System"};
    String[] seeeatwotuesday = {"1-Digital Logic Circuits", "2-Control Systems", "3-Analog Circuits", "4-Electrical Machines II", "5-Electrical Machines II Lab/Control Systems and Instrumentation Lab", "6-Electrical Machines II Lab/Control Systems and Instrumentation Lab", "7-Electrical Machines II Lab/Control Systems and Instrumentation Lab"};
    String[] seeeatwowednesday = {"1-Computational Methods", "2-Digital Logic Circuits", "3-Computational Methods", "4-Elecric Power System", "5-Electrical Machines II", "6-Elecric Power System", "7-Control Systems"};
    String[] seeeatwothursday = {"1-Control Systems", "2-Computational Methods", "3-Analog Circuits", "4-Digital Logic Circuits", "5-Digital and Analog Circuits Lab/Control Systems and Instrumentation Lab", "6-Digital and Analog Circuits Lab/Control Systems and Instrumentation Lab", "7-Digital and Analog Circuits Lab/Control Systems and Instrumentation Lab"};
    String[] seeeatwofriday = {"1-Elecric Power System", "2-Analog Circuits", "3-Control Systems", "4-Electrical Machines II", "5-Control Systems", "6-Digital Logic Circuits", "7-Computational Methods"};

    //eee a 3rd yr
    String[] teeeatwomonday = {"1-Embedded Systems", "2-Solid State Drives and Traction", "3-Computer Networks", "4-Solid State Devices/Optimization Techniques", "5-Power System Operation & Control", "6-Embedded Systems", "7-Solid State Devices/Optimization Techniques"};
    String[] teeeatwotuesday = {"1-Power System Simulation Lab", "2-Power System Simulation Lab", "3-Power System Simulation Lab", "4-Discrete Time Signal Processing", "5-Computer Networks", "6-Mini Project", "7-Mini Project"};
    String[] teeeatwowednesday = {"1-Discrete Time Signal Processing", "2-Solid State Drives and Traction", "3-Power System Operation & Control", "4-Computer Networks", "5-Solid State Devices/Optimization Techniques", "6-Solid State Drives and Traction", "7-Computer Networks"};
    String[] teeeatwothursday = {"1-Interview and Career Skills Lab", "2-Interview and Career Skills Lab", "3-Interview and Career Skills Lab", "4-Interview and Career Skills Lab", "5-Power System Operation & Control", "6-Discrete Time Signal Processing", "7-Solid State Drives and Traction"};
    String[] teeeatwofriday = {"1-Solid State Devices/Optimization Techniques", "2-Embedded Systems", "3-Power System Operation & Control", "4-Solid State Drives and Traction", "5-Discrete Time Signal Processing", "6-Power System Operation & Control", "7-Embedded Systems"};

    //eee a 4th yr
    String[] freeeatwomonday = {"1-Electric Energy Generation, Utilization and Conservation", "2-Power Electronics for Renewable Energy Systems/High Voltage Direct Current Transmission", "3-Power Electronics for Renewable Energy Systems/High Voltage Direct Current Transmission", "4-Professional Ethics in Engineering/Total Quality Management", "5-Professional Ethics in Engineering/Total Quality Management", "6-Electric Energy Generation, Utilization and Conservation", "7-Library"};
    String[] freeeatwotuesday = {"1-Professional Ethics in Engineering/Total Quality Management", "2-Electric Energy Generation, Utilization and Conservation", "3-Electric Energy Generation, Utilization and Conservation", "4-Professional Ethics in Engineering/Total Quality Management", "5-Power Electronics for Renewable Energy Systems/High Voltage Direct Current Transmission", "6-Power Electronics for Renewable Energy Systems/High Voltage Direct Current Transmission", "7-Seminar"};
    String[] freeeatwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] freeeatwothursday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] freeeatwofriday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};



    //eee-a odd sem


    String[] feeeaonemonday = {"1-Engineering Mathematics I", "2-Basic Civil Engineering", "3-Basic Mechanical Engineering", "4-Engineering Chemistry I", "5-Engineering Chemistry I", "6-Engineering Physics I","7-Engineering Mathematics I"};
    String[] feeeaonetuesday = {"1-Programming for problem solving", "2-Basic Civil Engineering", "3-Engineering Physics I", "4-Mathematics I", "5-Programming for problem solving", "6-Engineering Chemistry I", "7-Seminar I"};
    String[] feeeaonewednesday = {"1-Engineering Practices Lab", "2-Engineering Practices Lab", "3-Engineering Practices Lab", "4-Library", "5-Engineering Physics", "6-Communicative English", "7-Seminar II"};
    String[] feeeaonethursday = {"1-Engineering Chemistry I", "2-Programming for problem solving", "3-Engineering Mathematics I", "4-Commmunicative English", "5-Programming for problem solving Lab", "6-Programming for problem solving La", "7-Programming for problem solving La","8-Sports"};
    String[] feeeaonefriday = {"1-Communicative English", "2-Engineering Chemistry", "3-Programming for problem solving", "4-Engineering Chemistry I", "5-Mathematics I", "6-Basic Mechanical Engineering", "7-Seminar III"};


    String[] seeeaonemonday = {"1-Mathematics III", "2-Electrical Machines I", "3-Electron Devices and Circuits", "4-Programming and Data Structures", "5-Electron Devices and Circuits lab/Electrical Machines I lab", "6-Electron Devices and Circuits lab/Electrical Machines I lab", "7-Electron Devices and Circuits lab/Electrical Machines I lab"};
    String[] seeeaonetuesday = {"1-Electrical Machines I", "2-Measurements and Instrumentation", "3-Mathematics III", "4-Electrical Machines I", "5-Electromagnetic Theory", "6-Mathematics III", "7-Programming and Data Structures"};
    String[] seeeaonewednesday = {"1-Programming and Data Structures", "2-Electronic Devices and Circuits Lab/Programming and Data Structures Lab", "3-Electronic Devices and Circuits Lab/Programming and Data Structures Lab", "4-Electronic Devices and Circuits Lab/Programming and Data Structures Lab", "5-Electromagnetic Theory", "6-Electrical Machines -I", "7-Electron Devices and Circuits"};
    String[] seeeaonethursday = {"1-Electron Devices and Circuits", "2-Mathematics III", "3-Electromagnetic Theory", "4-Measurements and Instrumentation", "5-Electrical Machines I lab/Programming and Data Structures Lab", "6-Electrical Machines I lab/Programming and Data Structures Lab", "7-Electrical Machines I lab/Programming and Data Structures Lab"};
    String[] seeeaonefriday = {"1-Measurements and Instrumentation", "2-Programming and Data Structures", "3-Electromagnetic Theory", "4-Electron Devices and Circuits", "5-Electrical Machines I", "6-Mathematics III", "7-Measurements and Instrumentation"};

    String[] teeeaonemonday = {"1-Power System Analysis", "2-Environmental Scence and Engineering", "3-Power Electronics", "4-Power Plant Engineering", "5-Design of Electrical Apparatus", "6-Microprocessors and Microcontrollers", "7-SEMINAR"};
    String[] teeeaonetuesday = {"1-Microprocessors and Microcontrollers", "2-Power Electronics lab/Microprocessors and Microcontrollers Lab", "3-Power Electronics lab/Microprocessors and Microcontrollers Lab", "4-Power Electronics lab/Microprocessors and Microcontrollers Lab", "'5-Power Electronics ", "6-Power system Analysis", "7-Power Plant Engineeering"};
    String[] teeeaonewednesday = {"1-Power Plant Engineering ", "2-Power System Analysis", "3-Environmental Science and Engineering", "4-Power Electronics", "5-Microprocessors and Microcontrollers", "6-Design of Electrical Apparatus", "7-Power Plant Engineering"};
    String[] teeeaonethursday = {"1-Power Electronics", "2-Environmental Science and Engineering", "3-Power Plant Engineering", "4-Design of Electrical Apparatus", "5-Microprocessor and Microcontroller Lab/Power Electronice Lab", "6-Microprocessor and Microcontroller Lab/Power Electronice Lab", "7-Microprocessor and Microcontroller Lab/Power Electronice Lab"};
    String[] teeeaonefriday = {"1-Design of Electrical Apparatus", "2-Power Electronics", "3-Design of Electrical Apparatus", "4-Microprocessors and Microcontrollers", "5-Environmental Science and Engineering", "6-Power System Analysis", "7-SEMINAR"};

    String[] freeeaonemonday = {"1-High Voltage Engineering", "2-Principles of Management", "3-Protection & Switchgear", "4-High Voltage Engineering", "5-Power System Simulation lab/Comprehension", "6-Power System Simulation lab/Comprehension", "7-Power System Simulation lab/Comprehension"};
    String[] freeeaonetuesday = {"1-Special Electrical Machines", "2-Bio-Medical Instrumentation", "3-Fundamentals of Nanoscience", "4-Protection & Switchgear", "5-Principles of Management", "6-High Voltage Engineering", "7-Library DA"};
    String[] freeeaonewednesday = {"1-Protection & Switchgear", "2-Bio-Medical Instrumentation", "3-Fundamentals of Nanoscience", "4-Special Electrical Machines", "5-Power System Simulation lab/Comprehension", "6-Power System Simulation lab/Comprehension", "7-Power System Simulation lab/Comprehension"};
    String[] freeeaonethursday = {"1-High Voltage Engineering", "2-Special Electrical Machines", "3-Principles of Management", "4-Bio-Medical Instrumentation", "5-Protection & Switchgear", "6-Fundamentals of Nanoscience", "7-SEMINAR CGN"};
    String[] freeeaonefriday = {"1-Principles of Management", "2-Bio-Medical Instrumentation", "3-High Voltage Engineering", "4-Special Electrical Machines", "5-SST GVK", "6-SST CK", "7-SST KS"};


    //even sem eee b section full
    //eee b 1st yr
    String[] feeebtwomonday = {"1-Engineering Mathematics II", "2-Electric Circuit Analysis", "3-Library", "4-Engineering Mathematics II", "5-Physics of Materials", "6-Environmental Science and Engineering", "7-Technical English"};
    String[] feeebtwotuesday = {"1-Electric Circuit Analysis", "2-Environmental Science and Engineering", "3-Engineering Mathematics II", "4-Electric Circuit Analysis", "5-Technical English", "6-Physics of Materials", "7-Environmental Science and Engineering"};
    String[] feeebtwowednesday = {"1-Environmental Science and Engineering", "2-Physics of Materials", "3-Electric Circuit Analysis", "4-Seminar", "5-Engineering Mathematics II", "6-Physics and Chemistry Lab", "7-Physics and Chemistry Lab"};
    String[] feeebtwothursday = {"1-Engineering Drawing", "2-Engineering Drawing", "3-Engineering Drawing", "4-Technical English", "5-EcL", "6-EcL", "7-EcL"};
    String[] feeebtwofriday = {"1-Electric Circuit Analysis", "2-Physics of Materials", "3-Technical English", "4-Engineering Mathematics II", "5-Engineering Drawing", "6-Engineering Drawing", "7-Engineering Drawing"};

    //eee b 2nd yr
    String[] seeebtwomonday = {"1-Elecric Power System", "2-Electrical Machines II", "3-Control Systems", "4-Computation Methods", "5-Electrical Machines II Lab/Control Systems and Instrumentation Lab", "6-Electrical Machines II Lab/Control Systems and Instrumentation Lab", "7-Electrical Machines II Lab/Control Systems and Instrumentation Lab"};
    String[] seeebtwotuesday = {"1-Computational Methods", "2-Digital and Analog Circuits Lab/Control Systems and Instrumentation Lab", "3-Digital and Analog Circuits Lab/Control Systems and Instrumentation Lab", "4-Digital and Analog Circuits Lab/Control Systems and Instrumentation Lab", "5-Electrical Machines II", "6-Computational Methods", "7-Analog Circuits"};
    String[] seeebtwowednesday = {"1-Elecric Power System", "2-Computational Methods", "3-Elecric Power System", "4-Control Systems", "5-Electrical Machines II", "6-Digital Logic Circuits", "7-Control Systems"};
    String[] seeebtwothursday = {"1-Digital Logic Circuits", "2-Control Systems", "3-Computational Methods", "4-Analog Circuits", "5-Electrical Machines II", "6-Digital Logic Circuits", "7-Control Systems"};
    String[] seeebtwofriday = {"1-Cons", "2-Elecric Power System", "3-Analog Circuits", "4-Digital Logic Circuits", "5-Digital and Analog Circuits Lab/Electrical Machines II Lab", "6-Digital and Analog Circuits Lab/Electrical Machines II Lab", "7-Digital and Analog Circuits Lab/Electrical Machines II Lab"};

    //eee b 3rd yr
    String[] teeebtwomonday = {"1-Power System Simulation Lab", "2-Power System Simulation Lab", "3-Power System Simulation Lab", "4-Solid State Devices/Optimization Techniques", "5-Discrete Time Signal Processing", "6-Computer Networks", "7-Solid State Devices/Optimization Techniques"};
    String[] teeebtwotuesday = {"1-Solid State Drives and Traction", "2-Computer Networks", "3-Discrete Time Signal Processing", "4-Power System Operation & Control", "5-Embedded Systems", "6-Power System Operation & Control", "7-Solid State Drives and Traction"};
    String[] teeebtwowednesday = {"1-Embedded Systems", "2-Discrete Time Signal Processing", "3-Solid State Drives and Traction", "4-Embedded Systems", "5-Solid State Devices/Optimization Techniques", "6-Interview and Career Skills Lab", "7-Interview and Career Skills Lab"};
    String[] teeebtwothursday = {"1-Computer Networks", "2-Discrete Time Signal Processing", "3-Solid State Drives and Traction", "4-Embedded Systems", "5-Discrete Time Signal Processing", "6-Interview and Career Skills Lab", "7-Interview and Career Skills Lab"};
    String[] teeebtwofriday = {"1-Solid State Devices/Optimization Techniques", "2-Embedded Systems", "3-Mini Project", "4-Mini Project", "5-Power System Operation & Control", "6-Solid State Drives and Traction", "7-Computer Networks"};

    //eee b 4th yr
    String[] freeebtwomonday = {"1-Electric Energy Generation, Utilization and Conservation", "2-Electric Energy Generation, Utilization and Conservation", "3-Seminar", "4-Professional Ethics in Engineering/Total Quality Management", "5-Professional Ethics in Engineering/Total Quality Management", "6-Power Electronics for Renewable Energy Systems/High Voltage Direct Current Transmission", "7-Power Electronics for Renewable Energy Systems/High Voltage Direct Current Transmission"};
    String[] freeebtwotuesday = {"1-Professional Ethics in Engineering/Total Quality Management", "2-Power Electronics for Renewable Energy Systems/High Voltage Direct Current Transmission", "3-Power Electronics for Renewable Energy Systems/High Voltage Direct Current Transmission", "4-Professional Ethics in Engineering/Total Quality Management", "5-Professional Ethics in Engineering/Total Quality Management", "6-Electric Energy Generation, Utilization and Conservation", "7-Library"};
    String[] freeebtwowednesday = {"1-Project work","2-Project work","3-Project work","4-Project work","5-Project work","6-Project work","7-Project work"};
    String[] freeebtwothursday = {"1-Project work","2-Project work","3-Project work","4-Project work","5-Project work","6-Project work","7-Project work"};
    String[] freeebtwofriday = {"1-Project work","2-Project work","3-Project work","4-Project work","5-Project work","6-Project work","7-Project work"};



    //odd sem for frst ,second,third and fourth year eee b section



    String[] feeebonemonday = {"1-Communicative English", "2-Programming for problem solving", "3-Library", "4-Mathematics I", "5-Programming for problem solving Lab", "6-Programming for problem solving Lab", "7-Programming for problem solving Lab"};
    String[] feeebonetuesday = {"1-Basic Civil Engineering", "2-Seminar I", "3-Engineering Physics I", "4-Communicative English", "5-Engineering Chemistry I", "6-Mathematics I", "7-Programming for problem solving"};
    String[] feeebonewednesday = {"1-Programming for problem solving", "2-Engineering Chemistry I", "3-Seminar II", "4-Mathematics I", "5-Engineering Practices Lab", "6-Engineering Practices Lab ", "7-Engineering Practices Lab"};
    String[] feeebonethursday = {"1-Mathematics-I", "2-Basic Civil Engineering", "3-Engineering Physics-I", "4-Basic Civil Engineering", "5-Communicative English", "6-Engineering Physics", "7-Engineering Chemistry"};
    String[] feeebonefriday = {"1-Communicative English", "2-Programming for problem solving", "3-Basic Civil Engineering", "4-Seminar III", "5-Engineering Physics I", "6-Engineering Chemiostry I", "7-Engineering Methematics","8-Sports"};

    String[] seeebonemonday = {"1-Electromagnetic Theory", "2-Electrical Machines I", "3-Mathematics III", "4-Measurements and Instrumentation", "5-Programming and Data Structures", "6-Electron Devices and Circuits", "7-Mathematics III"};
    String[] seeebonetuesday = {"1-Mathematics III", "2-Electrical Machines I", "3-Measurements and Instrumentation", "4-Programming and Data Structures", "5-Electrical Machines I lab/Electron Devices and Circuits lab", "6-Electrical Machines I lab/Electron Devices and Circuits lab", "7-Electrical Machines I lab/Electron Devices and Circuits lab"};
    String[] seeebonewednesday = {"1-Electron Devices and Circuits", "2-Measurements and Instrumentation", "3-Electromagnetic Theory", "4-Electrical Machines I", "5-Programming and Data Structures", "6-Electron Devices and Circuits", "7-Electrical Machines I"};
    String[] seeebonethursday = {"1-Programming and Data Structures", "2-Electron Devices and Circuits Lab/Programming and Data Structures Lab", "3-Electron Devices and Circuits Lab/Programming and Data Structures Lab", "4-Electron Devices and Circuits Lab/Programming and Data Structures Lab", "5-Electromagnetic Theory", "6-Mathematics III", "7-Measurements and Instrumentation"};
    String[] seeebonefriday = {"1-Electromagnetic Theory", "2-Electron Devices and Circuits", "3-Mathematics III", "4-Electrical Machines I", "5-Programming and Data Structures lab/Electrical Machines I lab", "6-Programming and Data Structures lab/Electrical Machines I lab", "7-Programming and Data Structures lab/Electrical Machines I lab"};

    String[] teeebonemonday = {"1-Microprocessors and Microcontrollers", "2-Power Electronics", "3-Total Quality Management", "4-Design of Electrical Apparatus ", "5-Environmental science and Engineering", "6-Total Quality Management", "7-Library "};
    String[] teeebonetuesday = {"1-Total Quality Management", "2-Design of Electrical Apparatus", "3-Environmental science and Engineering", "4-Power system Analysis", "5-Environmental science and Engineering", "6-Power Electronics", "7-SEMINAR "};
    String[] teeebonewednesday = {"1-Design of Electrical Apparatus", "2-Power system Analysis", "3-Microprocessor and Microcontroller", "4-Power Electronics", "5-Power Electronics Lab/Microprocessor and Microcontroller Lab", "6-Power Electronics Lab/Microprocessor and Microcontroller Lab", "7-Power Electronics Lab/Microprocessor and Microcontroller Lab"};
    String[] teeebonethursday = {"1-Power System Analysis ", "2-Environmental science and Engineering", "3-Power Electronics", "4-Design of Electrical Apparatus", "5-Microprocessor and Microcontroller", "6-Total Quality Management", "7-Seminar"};
    String[] teeebonefriday = {"1-Microprocessors and Microcontrollers", "2-Power Electronics Lab/Microprocessor and Microcontroller Lab", "3-Power Electronics Lab/Microprocessor and Microcontroller Lab ", "4-Power Electronics Lab/Microprocessor and Microcontroller Lab", "5-Power System Analysis", "6-Power Electronics", "7-Design of Electrical Apparatus"};

    String[] freeebonemonday = {"1-Fundamentals of Nanoscience", "2-Bio-Medical Instrumentation", "3-Special Electrical Machines", "4-Bio-Medical Instrumentation", "5-Protection & Switchgear", "6-Protection & Switchgear", "7-SEMINAR"};
    String[] freeebonetuesday = {"1-Special Electrical Machines", "2-High Voltage Engineering", "3-Fundamentals of Nanoscience", "4-Principles of Management", "5-Power System Simulation lab/Comprehension", "6-Power System Simulation lab/Comprehension", "7-Power System Simulation lab/Comprehension"};
    String[] freeebonewednesday = {"1-Bio-Medical Instrumentation", "2-Principles of Management", "3-High Voltage Engineering", "4-Protection & Switchgear", "5-SST SSI", "6-SST RKK", "7-SST RKK"};
    String[] freeebonethursday = {"1-High Voltage Engineering", "2-Protection & Switchgear", "3-Bio-Medical Instrumentation", "4-Special Electrical Machines", "5-Fundamentals of Nanoscience", "6-Special Electrical Machines", "7-Principles of Management"};
    String[] freeebonefriday = {"1-Power System Simulation lab/Comprehension", "2-Power System Simulation lab/Comprehension", "3-Power System Simulation lab/Comprehension", "4-Principles of Management", "5-High Voltage Engineering", "6-Fundamentals of Nanoscience", "7-Library"};


    //even it a full
    //it a 1st yr
    String[] fitatwomonday = {"1-Engineering Mathematics II ", "2-Technical English", "3-OOPS using c++ and Python", "4-LIB", "5-OOPS using C++ and Python Laboratory/Digital Principal and System Desidn LAB", "6-OOPS using C++ and Python Laboratory/Digital Principal and System Desidn LAB", "7-OOPS using C++ and Python Laboratory/Digital Principal and System Desidn LAB"};
    String[] fitatwotuesday = {"1-OOPS using c++ and Python", "2-Digital Principal and System Desidn", "3-Engineering Mathematics II", "4-Engineering Drawing", "5-OOPS using c++ and Python", "6-Engineering Drawing", "7-SPECIAL CLASS"};
    String[] fitatwowednesday ={"1-OOPS using C++ and Python Laboratory/Digital Principal and System Desidn LAB", "2-OOPS using C++ and Python Laboratory/Digital Principal and System Desidn LAB", "3-OOPS using C++ and Python Laboratory/Digital Principal and System Desidn LAB", "4-", "5-Technical English", "6-Engineering Mathematics II", "7-Engineering Drawing"};
    String[] fitatwothursday ={"1-Engineering Drawing", "2-Engineering Drawing", "3-Engineering Drawing", "4-Digital Principal and System Desidn", "5-OOPS using c++ and Python", "6-Technical English", "7-Engineering Mathematics II"};
    String[] fitatwofriday = {"1-Digital Principal and System Desidn", "2-Engineering Drawing", "3-Engineering Mathematics II", "4-Technical English", "5-Engineering Drawing", "6-Engineering Drawing", "7-Engineering Drawing"};

    //it a 2nd yr
    String[] sitatwomonday = {"1-MicroProcessor and MicroController", "2-Paradigms of algorithm design", "3-Software engineering methodologies", "4-IT Essentials", "5-Database Mamagement System", "6-Probability and Queuing Theory", "7-LIB"};
    String[] sitatwotuesday = {"1-Database Mamagement System", "2-Probability and Queuing Theory", "3-MicroProcessor and MicroController", "4-Paradigms of algorithm design", "5-Mini Project", "6-Mini Project", "7-Mini Project"};
    String[] sitatwowednesday = {"1-IT Essentials", "2-Database Management Systems/Microprocessor and Microcontroller Lab", "3-Database Management Systems/Microprocessor and Microcontroller Lab", "4-Database Management Systems/Microprocessor and Microcontroller Lab", "5-Probability and Queuing Theory", "6-Database Mamagement System", "7-MicroProcessor and MicroController"};
    String[] sitatwothursday = {"1-Software engineering methodologies", "2-IT Essentials", "3-Paradigms of algorithm design", "4-Probability and Queuing Theory", "5-Database Management Systems/Microprocessor and Microcontroller Lab", "6-Database Management Systems/Microprocessor and Microcontroller Lab", "7-Database Management Systems/Microprocessor and Microcontroller Lab"};
    String[] sitatwofriday = {"1-Probability and Queuing Theory", "2-MicroProcessor and MicroController", "3-Software engineering methodologies", "4-Database Mamagement System", "5-IT Essentials", "6-Paradigms of algorithm design", "7-Software engineering methodologies"};

    //it a 3rd yr
    String[] titatwomonday ={"1-User Interface Technologies/Mobile Computing", "2-Software Testing And Quality Assurance", "3-Service Oriented Architecture", "4-Automata and Compiler Design", "5-Mobile Application Development Laboratory/Automata and Compiler Laboratory", "6-Mobile Application Development Laboratory/Automata and Compiler Laboratory", "7-Mobile Application Development Laboratory/Automata and Compiler Laboratory"};
    String[] titatwotuesday ={"1-Interview and Career Skills Laboratory", "2-Interview and Career Skills Laboratory", "3-Interview and Career Skills Laboratory", "4-Interview and Career Skills Laboratory", "5-User Interface Technologies/Mobile Computing", "6-Service Oriented Architecture", "7-Automata and Compiler Design"};
    String[] titatwowednesday = {"1-Service Oriented Architecture", "2-Mobile Computing", "3-Automata and Compiler Design", "4-User Interface Technologies/Mobile Computing", "5-Information and Coding Theory", "6-Mobile Computing", "7-Software Testing And Quality Assurance"};
    String[] titatwothursday ={"1-Automata and Compiler Design", "2-Information and Coding Theory", "3-Mobile Computing", "4-Software Testing And Quality Assurance", "5-User Interface Technologies/Mobile Computing", "6-Information and Coding Theory", "7-Service Oriented Architecture"};
    String[] titatwofriday ={"1-Information and Coding Theory", "2-Mobile Application Development Laboratory/Automata and Compiler Laboratory", "3-Mobile Application Development Laboratory/Automata and Compiler Laboratory", "4-Mobile Application Development Laboratory/Automata and Compiler Laboratory", "5-Software Testing And Quality Assurance", "6-Automata and Compiler Design", "7-Mobile Computing"};

    //it a 4th yr
    String[] fritatwomonday = {"1-Project Work", "2-Project Work", "3-Project Work", "4-Project Work", "5-Project WorkProject Work", "6-Project Work", "7-Project Work"};
    String[] fritatwotuesday = {"1-Project Work", "2-Project Work", "3-Project Work", "4-Project Work", "5-Project Work", "6-Project Work", "7-Project Work"};
    String[] fritatwowednesday = {"1-Service Oriented Architecture", "2-Cyber Forensics", "3-Professional Ethics in Engineering", "4-Software Pro.iect Management", "5-Professional Ethics in Engineering", "6-Software Project Management", "7-Service Oriented Architecture"};
    String[] fritatwothursday = {"1-Cyber Forensics", "2-Service Oriented Architecture", "3-Software Project Management", "4-Professional Ethics in Engineering", "5-Software Project Management", "6-Service Oriented Architecture", "7-Cyber Forensics"};
    String[] fritatwofriday = {"1-Software Project Management", "2-Professional Ethics in Engineering", "3-Cyber Forensics", "4-Service Oriented Architecture ", "5-Professional Ethics in Engineering", "6-Cyber Forensics", "7-Software Project Management"};




    //odd sem IT



    String[] fitaonemonday = {"1-Basic Electrical and Electronics Engineering", "2-Engineering Physics I", "3-Engineering Chemistry I", "4.Programming for problem solving", "5-Communicative English ", "6-Engineering Mathematics I", "7-Programming for problem solving"};
    String[] fitaonetuesday = {"1-Communicative English", "2-Engineering Chemistry", "3-Engineering Mathematics III", "4-Engineering Physics I", "5-Basic Electrical and Electronics Engineering", "6-Physics/Chemistry Lab", "7-Physics/Chemistry Lab"};
    String[] fitaonewednesday = {"1-Basic Electrical and Electronics Engineering", "2-Seminar", "3-Engineering Physics", "4-Mathematics I", "5-Library", "6-Programming for problem solving", "7-Communicative English"};
    String[] fitaonethursday = {"1-Engineering Practices Lab", "2-Engineering Practices Lab", "3-Engineering Practices Lab", "4-Mathematics I", "5-Engineering Physics I", "6-Engineering Physics I", "7-Basic Electrical and Electronics Engineering","8-Sports"};
    String[] fitaonefriday = {"1-Programming for problem solving", "2-Communicative English", "3-Engineering Chemistry-I", "4-Mathematics-I", "5-Programming for problem solving Lab ", "6-Programming for problem solving Lab", "7-Programming for problem solving Lab"};


    String[] sitaonemonday = {"1-Operating Systems", "2-Analog and Digital Communication lab/Programming and Data Structures lab II", "3-Analog and Digital Communication lab/Programming and Data Structures lab II", "4-Analog and Digital Communication lab/Programming and Data Structures lab II", "5-Mathematics III", "6-Analog and Digital Communication", "7-Computer Organization and Architecture"};
    String[] sitaonetuesday = {"1-Programming and Data Structures II", "2-Computer Organization and Architecture", "3-Mathematics III", "4-Operating Systems", "5-Environmental Science and Engineering", "6-Programming and Data Structures II", "7-Mathematics-III"};
    String[] sitaonewednesday = {"1-Analog and Digital Communication", "2-Operating Systems", "3-Computer Organization and Architecture", "4-Programming and Data Structures", "5-Operating Systems lab/Analog and Digital Communication lab", "6-Operating Systems lab/Analog and Digital Communication lab", "7-Operating Systems lab/Analog and Digital Communication lab"};
    String[] sitaonethursday = {"1-Computer Organization and Architecture", "2-Analog and Digital Communication", "3-Mathematics III", "4-Environmental Science and Engineering", "5-Programming and Data Structures lab II/Operating Systems lab", "6-Programming and Data Structures lab II/Operating Systems lab", "7-Programming and Data Structures lab II/Operating Systems lab"};
    String[] sitaonefriday = {"1-Mathematics III", "2-Programming and Data Structures II", "3-Analog and Digital Communication", "4-Environmental Science and Engineering", "5-Library", "6-Operating Systems", "7-Environmental Science and Engineering"};


    String[] titaonemonday = {"1-Web Programming", "2-Computational Intelligence", "3-Digital Signal Processing", "4-Graphics and Multimedia", "5-Networks Lab", "6-Networks Lab", "7-Networks Lab"};
    String[] titaonetuesday = {"1-Computer Networks", "2-Case Tools lab/Web Programming lab", "3-Case Tools lab/Web Programming lab", "4-Case Tools lab/ lab", "5-Computational Intelligence", "6-Web Programming", "7-Computer Networks"};
    String[] titaonewednesday = {"1-Digital Signal Processing", "2-Object Oriented Analysis and Design", "3-Graphics and Multimedia", "4-Web Programming", "5-Computer Networks", "6-Computational Intelligence (T)", "7-Digital Signal Processing(T)"};
    String[] titaonethursday = {"1-Computational Intelligence", "2-Case Tools lab/Web Programming lab", "3-Case Tools lab/Web Programming lab", "4-Case Tools lab/Web Programming lab", "5-Digital Signal Processing", "6-Object Oriented Analysis and Design", "7-Graphics and multimedia"};
    String[] titaonefriday = {"1-Graphics and Multimedia", "2-Computer Networks", "3-Web Programming", "4-Computational Intelligence", "5-Object Oriented Analysis and Design", "6-Digital Signal Processing", "7-Object Oriented Analysis and Design"};


    String[] fritaonemonday = {"1-Grid and cloud computing lab/Security lab", "2-Grid and cloud computing lab/Security lab", "3-Grid and cloud computing lab/Security lab", "4-Information Management", "5-Cryptography and Network Security", "6-Data Ware Housing and Data Mining", "7-Library"};
    String[] fritaonetuesday = {"1-Grid and Cloud Computing", "2-Cryptography and Network Security", "3-Information Management", "4-Data Ware Housing and Data Mining", "5-Security lab/Grid and Cloud Computing lab", "6-Security lab/Grid and Cloud Computing lab", "7-Security lab/Grid and Cloud Computing lab"};
    String[] fritaonewednesday = {"1-Data Mining Lab", "2-Data Mining Lab", "3-Data Mining Lab", "4-Software Testings", "5-Seminar", "6-Grid and Cloud Computing", "7-Seminar"};
    String[] fritaonethursday = {"1-Software Testing ", "2-Data Ware Housing and Data Mining", "3-Information Management", "4-Seminar", "5-Grid and Cloud Computing", "6-Cryptography and Network Security", "7-Seminar"};
    String[] fritaonefriday = {"1-Cryptography and Network Security", "2--Grid and Cloud Computing", "3-Software Testings", "4-Data Ware Housing and Data Mining", "5-Software Testings", "6-Cryptography and Network Security", "7-Seminar"};


    //it b full
    //it b 1st yr
    String[] fitbtwomonday = {"1-Digital Principles and System Design", "2-OOPS using C++ and Python", "3-Technical English", "4-Library", "5-Environmental Science and Engineering", "6-Engineering Mathematics - II", "7-Special class"};
    String[] fitbtwotuesday ={"1-OOPS using C++ and Python", "2-Digital Principles and System Design", "3-Engineering Mathematics - II", "4-Environmental Science and Engineering", "5-Digital Principles and System Design Laboratory/OOPS lab", "6-Digital Principles and System Design Laboratory/OOPS lab", "7-Digital Principal and System Desidn lab/OOPS lab"};
    String[] fitbtwowednesday ={"1-Engineering Drawing", "2-Engineering Drawing", "3-Engineering Drawing", "4-OOPS using C++ and Python", "5-Technical English", "6-Digital Principles and System Design", "7-Engineering Mathematics - II"};
    String[] fitbtwothursday = {"1-Digital Principal and System Desidn/OOPS lab", "2-Digital Principal and System Desidn/OOPS lab", "3-Digital Principal and System Desidn/OOPS lab", "4-Engineering Mathematics - II", "5-Engineering Drawing", "6-Engineering Drawing", "7-Engineering Drawing"};
    String[] fitbtwofriday = {"1-Technical English", "2-Engineering Mathematics - II", "3-Environmental Science and Engineering", "4-Digital Principles and System Design", "5-OOPS using C++ and Python", "6-Environmental Science and Engineering", "7-"};

    //it b 2nd yr
    String[] sitbtwomonday ={"1-Probability and Queuing Theory", "2-Database Management Systems", "3-IT Essentials", "4-Microprocessor and Microcontroller", "5-Mini Project", "6-Mini Project", "7-Mini Project"};
    String[] sitbtwotuesday = {"1-Database Management Systems", "2Software Engineering Methodologies-", "3-Database Management Systems", "4-Paradigms of Algorithm Design", "5-Software Engineering Methodologies", "6-Software Engineering Methodologies", "7-Probability and Queuing Theory"};
    String[] sitbtwowednesday ={"1-Microprocessor and Microcontroller", "2-Probability and Queuing Theory", "3-Paradigms of Algorithm Design", "4-Software Engineering Methodologies", "5-Database Mamagement System/MicroProcessor and MicroController lab", "6-Database Mamagement System/MicroProcessor and MicroController lab", "7-Database Mamagement System/MicroProcessor and MicroController lab"};
    String[] sitbtwothursday = {"1-IT Essentials", "2-Database Mamagement System/MicroProcessor and MicroController lab", "3-Database Mamagement System/MicroProcessor and MicroController lab", "4-Database Mamagement System/MicroProcessor and MicroController lab", "5-Probability and Queuing Theory", "6-IT Essentials", "7-Microprocessor and Microcontroller"};
    String[] sitbtwofriday = {"1-Paradigms of Algorithm Design", "2-IT Essentials", "3-Probability and Queuing Theory", "4-Database Management Systems", "5-LIB", "6-Paradigms of Algorithm Design", "7-Software Engineering Methodologies"};

    //it b 3rd yr
    String[] titbtwomonday = {"1-User Interface Technologies/Data Science using python", "2-Mobile Application Development Laboratory/Automata and Compiler Laboratory", "3-Mobile Application Development Laboratory/Automata and Compiler Laboratory", "4-Mobile Application Development Laboratory/Automata and Compiler Laboratory", "5-Software Testing And Quality Assurance", "6-Interview and Career Skills Laboratory", "7-Interview and Career Skills Laboratory"};
    String[] titbtwotuesday ={"1-Information and Coding Theory", "2-Service Oriented Architecture", "3-Automata and Compiler Design", "4Mobile Computing-", "5-User Interface Technologies/Data Science using python", "6-Interview and Career Skills Laboratory", "7-Interview and Career Skills Laboratory"};
    String[] titbtwowednesday = {"1-Mobile Computing", "2-Automata and Compiler Design", "3-Software Testing And Quality Assurance", "4-User Interface Technologies/Data Science using python", "5-Automata and Compiler Design", "6-Mobile Computing", "7-Information and Coding Theory"};
    String[] titbtwothursday = {"1-Automata and Compiler Design", "2-Information and Coding Theory", "3-Mobile Computing", "4-Service Oriented Architecture", "5-User Interface Technologies/Data Science using python", "6-Automata and Compiler Design", "7-Software Testing And Quality Assurance"};
    String[] titbtwofriday = {"1-Service Oriented Architecture", "2-Software Testing And Quality Assurance", "3-Information and Coding Theory", "4-Service Oriented Architecture", "5-Mobile Application Development Laboratory/Automata and Compiler Laboratory", "6-Mobile Application Development Laboratory/Automata and Compiler Laboratory", "7-Mobile Application Development Laboratory/Automata and Compiler Laboratory"};

    //it b 4th yr
    String[] fritbtwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] fritbtwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] fritbtwowednesday = {"1-Professional Ethics in Engineering", "2-Cyber Forensics", "3-Service Oriented Architecture", "4-Professional Ethics in Engineering", "5-Service Oriented Architecture", "6-Seminar", "7-LIB"};
    String[] fritbtwothursday ={"1-Cyber Forensics-", "2-Service Oriented Architecture", "3-Professional Ethics in Engineering", "4-software Proiect Management", "5-Professional Ethics in Engineering", "6-software Proiect Management", "7-Cyber Forensics"};
    String[] fritbtwofriday ={"1-Service Oriented Architecture", "2-software Proiect Management", "3-Cyber Forensics", "4-software Proiect Management", "5-Service Oriented Architecture", "6-Cyber Forensics", "7-Professional Ethics in Engineering"};


    //odd sem for frst,second,third and fourth year for it b section



    String[] fitbonemonday = {"1-Engineering Practices Lab", "2-Engineering Practices Lab", "3-Engineering Practices Lab", "4-Engineering Physics I", "5-Mathematics I", "6-Communicative English","7-Engineering Chemistry I"};
    String[] fitbonetuesday = {"1-Programming for problem solving", "2-Communicative English", "3-Engineering Chemistry I", "4-Mathematics I", "5-Basic Electrical and Electronics Engineering", "6-Engineering Physics I", "7-Programming for Probelm solving"};
    String[] fitbonewednesday = {"1-Mathematics I", "2-Programming for problem solving", "3-Basic Electrical and Electronics Engineering", "4-Library", "5-Programming for problem solving Lab", "6-Programming for problem solving Lab", "7-Programming for problem solving Lab"};
    String[] fitbonethursday = {"1-Engineering Physics I", "2-Basic Electrical and Electronics Engineering", "3-Engineering Cehmistry I", "4-Physics/ Chemistry Lab", "5-Physics/ Chemistry Lab", "6-Mathematics", "7-Communicative English"};
    String[] fitbonefriday = {"1-Basic Electrical and Electronics Engineering", "2-Mathematics I", "3-Communicative English", "4-PRogramming for problem solving", "5-Seminar", "6-Engineering Chemistry I","7-Engineering Physics I","8-Sports"};

    String[] sitbonemonday = {"1-Mathematics III", "2-Programming and Data Structures II", "3-Mathematics III", "4-Environmental Science and Engineering", "5-Programming and Data Structures lab II/Operating Systems lab", "6-Programming and Data Structures lab II/Operating Systems lab", "7-Programming and Data Structures lab II/Operating Systems lab"};
    String[] sitbonetuesday = {"1-Computer Organization and Architecture", "2-Operating Systems lab/Analog and Digital Communication lab", "3-Operating Systems lab/Analog and Digital Communication lab", "4-Operating Systems lab/Analog and Digital Communication lab", "5-Analog and Digital Communication", "6-Environmental Science and Engineering", "7-Operating Systems"};
    String[] sitbonewednesday = {"1-Mathematics III", "2-Analog and Digital Communication", "3-Computer Organization and Architecture", "4-Operating Systems", "5-Programming and Data Structures II", "6-Mathematics III", "7-Library"};
    String[] sitbonethursday = {"1-Analog and Digital Communication", "2-Operating Systems", "3-Programming and Data Structures II", "4-Computer Organization and Architecture", "5-Mathematics III", "6-Environmental Science and Engineering", "7-Analog and Digital Communication"};
    String[] sitbonefriday = {"1-Programming and Data Structures II", "2-Computer Organization and Architecture", "3-Environmental Science and Engineering", "4-Mathematics III", "5-Analog and Digital Communication lab/Programming and Data Structures lab II", "6-Analog and Digital Communication lab/Programming and Data Structures lab II", "7-Analog and Digital Communication lab/Programming and Data Structures lab II"};


    String[] titbonemonday = {"1-Graphics and Multimedia", "2-Networks lab", "3-Networks lab", "4-Networks lab", "5-", "6-Digital Signal Processing", "7-Computational Intelligence (T)"};
    String[] titbonetuesday = {"1-Computational Intelligence", "2-Computer Networks", "3-Object Oriented Analysis and Design", "4-Digital Signal Processing", "5-Web Programming", "6-Computer Networks", "7-Graphics and Multimedia"};
    String[] titbonewednesday = {"1-Digital Signal Processing", "2-Object Oriented Analysis and Design", "3-Graphics and Multimedia", "4-Object Oriented Analysis and Design", "5-Case Tools lab/Web Programming lab", "6-Case Tools lab/Web Programming lab", "7-Case Tools lab/Web Programming lab"};
    String[] titbonethursday = {"1-Web Programming", "2-Digital Signal Processing", "3-Computational Intelligence", "4-Computer Networks", "5-Computational Intelligence", "6-Graphics and Multimedia", "7-Digital Signal Processing(Tutorial)"};
    String[] titbonefriday = {"1-Computer Networks", "2-Case Tools lab/Web Programming lab", "3-Case Tools lab/Web Programming lab", "4-Case Tools lab/Web Programming lab", "5-Computational Intelligence", "6-Web Programming", "7-Object Oriented Analysis and Design"};


    String[] fritbonemonday = {"1-Information Management", "2-Cryptography and Network Security", "3-Data Ware Housing and Data Mining", "4-Grid and Cloud Computing", "5-Seminar", "6-Software Testing", "7-Seminar"};
    String[] fritbonetuesday = {"1-Grid and Cloud Computing","2-Data Ware Housing and Data Mining","3-Cryptography and Network Security","4-Seminar","5-Data Mining lab","6-Data Mining lab","7-Data Mining lab"};
    String[] fritbonewednesday = {"1-Security lab/Grid and Cloud Computing lab", "2-Security lab/Grid and Cloud Computing lab", "3-Security lab/Grid and Cloud Computing lab", "4-Information Management", "5-Software Testing", "6-Grid and Cloud Computing", "7-Seminar "};
    String[] fritbonethursday = {"1-Software Testing", "2-Information Management", "3-Data Ware Housing and Data Mining", "4-Seminar", "5-Cryptography and Network Security", "6-Information Management", "7-Library"};
    String[] fritbonefriday = {"1-Data Ware Housing and Data Mining", "2-/Grid and Cloud Computing", "3-Cryptography and Network Security", "4-Software Testing", "5-Security lab/Grid and Cloud Computing lab", "6-Grid and Cloud Computing", "7-Software Testing/Data Analytics"};

    //even sem mech a full
    String[] fmechatwomonday = {"1-Machine Drawing Lab", "2-Machine Drawing Lab", "3-Machine Drawing Lab", "4-Engineering Mathematics II", "5-Environmental Science and Engineering", "6-Technical English", "7-Programming for Problem Solving"};
    String[] fmechatwotuesday = {"1-Technical English", "2-Programming for Problem Solving", "3-Environmental Science and Engineering", "4-Engineering Mechanics", "5-Material Science", "6-Engineering Mathematics II", "7-Seminar 1"};
    String[] fmechatwowednesday = {"1-Engineering Mathematics II", "2-Material Science", "3-Engineering Mechanics", "4-Technical English", "5-Programming for Problem Solving Labratory", "6-Programming for Problem Solving Labratory", "7-Programming for Problem Solving Labratory"};
    String[] fmechatwothursday = {"1-Engineering Mechanics", "2-Material Science", "3-Engineering Mathematics II", "4-Programming for Problem Solving", "5-Environmental Science and Engineering", "6-Library", "7-Seminar 2"};
    String[] fmechatwofriday = {"1-Programming for Problem Solving", "2-Material Science", "3-Environmental Science and Engineering", "4-Engineering Mathematics II", "5-Technical English", "6-Engineering Mechanics", "7-Seminar 3"};

    //mech a 2nd yr
    String[] smechatwomonday = {"1-Computational Methods", "2-Thermal Engineering", "3-Mnufacturing Technology II", "4-Fluid Mechanics and Machinery", "5-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "6-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "7-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab"};
    String[] smechatwotuesday = {"1-Thermal Engineering", "2-Fluid Mechanics and Machinery", "3-Computational Methods", "4-Thermal Engineering", "5-Environmental Science and Engineering", "6-Kinetics of Machinery", "7-Computational Methods"};
    String[] smechatwowednesday = {"1-Manufacturing Technology II", "2-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "3-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "4-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "5-Manufacturing Technology II", "6-Fluid Mechanics and Machinery", "7-Thermal Engineering"};
    String[] smechatwothursday = {"1-Kinetics of Machinery", "2-Environmental Science and Engineering", "3-Thermal Engineering", "4-Kinetics of Machinery", "5-Computational Methods", "6-Manufacturing Technology II", "7-Fluid Mechanics and Machinery"};
    String[] smechatwofriday = {"1-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "2-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "3-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "4-Kinetics of Machinery", "5-Computational Methods", "6-Environmental Science and Engineering", "7-Fluid Mechanics and Machinery"};

    //mech a 3rd yr
    String[] tmechatwomonday = {"1-Design of Transmission Systems", "2-Finite Element Analysis", "3-Gas Dynamics and Jet Propulsion", "4-Hydraulics and Pneumatics", "5-CAD/CAM Lab", "6-CAD/CAM Lab", "7-CAD/CAM Lab"};
    String[] tmechatwotuesday = {"1-Gas Dynamics and Jet Propulsion", "2-Automobile Engineering", "3-Hydraulics and Pneumatics", "4-Design of Transmission Systems", "5-Finite Element Analysis", "6-Placement", "7-Placement"};
    String[] tmechatwowednesday = {"1-Interview and Career Skills Lab", "2-Interview and Career Skills Lab", "3-Interview and Career Skills Lab", "4-Interview and Career Skills Lab", "5-Quality Control and Reliability Engineering/Renewable Source of Energy/Unconventional Machining Processes", "6-Finite Element Analysis", "7-Automobile Engineering"};
    String[] tmechatwothursday = {"1-Finite Element Analysis", "2-Hap", "3-Design of Transmission Systems", "4-Quality Control and Reliability Engineering/Renewable Source of Energy/Unconventional Machining Processes", "5-Design and Fabrication Project", "6-Design and Fabrication Project", "7-Design and Fabrication Project"};
    String[] tmechatwofriday = {"1-Quality Control and Reliability Engineering/Renewable Source of Energy/Unconventional Machining Processes", "2-Automobile Engineering", "3-Gas Dynamics and Jet Propulsion", "4-Finite Element Analysis", "5-Placement", "6-Design and Fabrication Project", "7-Placement"};

    //mech a 4th yr
    String[] frmechatwomonday = {"1-Entrepreneurship Development", "2-Engineerng Economics", "3-Entrepreneurship Development", "4-Engineerng Economics", "5-Advanced IC Engines/Additive Manufacturing/Non Destructive Testing and Materials", "6-Advanced IC Engines/Additive Manufacturing/Non Destructive Testing and Materials", "7-Project work"};
    String[] frmechatwotuesday = {"1-Entrepreneurship Development", "2-Advanced IC Engines/Additive Manufacturing/Non Destructive Testing and Materials", "3-Engineerng Economics", "4-Advanced IC Engines/Additive Manufacturing/Non Destructive Testing and Materials", "5-Entrepreneurship Development", "6-Engineerng Economics", "7-Project work"};
    String[] frmechatwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frmechatwothursday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frmechatwofriday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};

    //odd sem for second.third and fourth year mech a section



    String[] fmechaonemonday = {"1-Engineering Chemistry-I", "2-Basic Electrical and Electronics Engineering", "3-Mathematics-I", "4-Communicative English", "5-Engineering Practices laboratory", "6-Engeering Practise laboratory", "7-Engeering Practise laboratory","8-Sports"};
    String[] fmechaonetuesday = {"1-Engineering Mathematics", "2-Seminar", "3-Engineering Physics I", "4-Basic Electrical and Electronics Engineering", "5-Chemistry", "6-Computer Practise Laboratory", "7-Computer Practise Laboratory"};
    String[] fmechaonewednesday = {"1-Engineering Graphics", "2-Engineering Graphics", "3-Engineering Graphics", "4-Communicative English", "5-Engineering Chemistry I", "6-Engineering Physics I", "7-Mathematics-I"};
    String[] fmechaonethursday = {"1-Communicative English", "2-Engineering Physics-I", "3-Engineering Chemistry-I", "4-Mathematics-I", "5-Engineering Graphics", "6-Engineering Graphics", "7-Engineering Graphics"};
    String[] fmechaonefriday = {"1-Basic Electrical and Electronics Engineering", "2-Physics/Chemistry Lab", "3-Engineering Mathematics-I", "4-Engineering Mathematics-I", "5-Communicative English", "6-Library", "7-Seminar"};

    String[] smechaonemonday = {"1-Mathematics III", "2-Manufacturing Technology lab I/Strength of Materials lab/Electrical Engineering lab", "3-Manufacturing Technology lab I/Strength of Materials lab/Electrical Engineering lab", "4-Manufacturing Technology lab I/Strength of Materials lab/Electrical Engineering lab", "5-Manufacturing Technology I", "6-Mechanics of Solids", "7-Engineering Materials and Metallurgy/Electrical Drives and Controls"};
    String[] smechaonetuesday = {"1-Manufacturing Technology I", "2-Engineering Thermodynamics", "3-Electrical Drives and Controls", "4-Mechanics of Solids", "5-Engineering Materials and Metallurgy", "6-Mathematics III", "7-Mechanics of Solids(T)"};
    String[] smechaonewednesday = {"1-Engineering Thermodynamics", "2-Manufacturing Technology lab I/Strength of Materials lab/Electrical Engineering lab", "3-Manufacturing Technology lab I/Strength of Materials lab/Electrical Engineering lab", "4-Manufacturing Technology lab I/Strength of Materials lab/Electrical Engineering lab", "5-Mathematics-III", "6-Electrical Drives and Controls", "7-Engineering Materials and Metallurgy"};
    String[] smechaonethursday = {"1-Electrical Drives and Controls", "2-Engineering Materials and Metallurgy", "3-Engineering Thermodynamics", "4-Mechanics of Solids", "5-Engineering Thermodynamics(Tutorial)", "6-Manufacturing Technology lab I", "7-Mathematics III(T)"};
    String[] smechaonefriday = {"1-Mechanics of Solids", "2-Manufacturing Technology I", "3-Engineering Thermodynamics", "4-Mathematics III", "5-Manufacturing Technology lab I/Strength of Materials lab/Electrical Engineering lab", "6-Manufacturing Technology lab I/Strength of Materials lab/Electrical Engineering lab", "7-Manufacturing Technology lab I/Strength of Materials lab/Electrical Engineering lab"};

    String[] tmechaonemonday = {"1-Heat and Mass Transfer", "2-Design of Machine Elements", "3-Dynamics of Machines", "4-Heat and Mass Transfer(T)", "5-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab", "6-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab", "7-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab"};
    String[] tmechaonetuesday = {"1-Metrology and Measurements", "2-Principles of Management", "3-Computer Aided Design", "4-Metrology and Measurements", "5-Heat and Mass Transfer", "6-Design of Machine Elements", "7-Dynamics of Machines"};
    String[] tmechaonewednesday = {"1-Principles of Management", "2-Computer Aided Design", "3-Heat and Mass Transfer", "4-Metrology and Measurements", "5-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab", "6-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab", "7-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab"};
    String[] tmechaonethursday = {"1-Dynamics of Machines", "2-Design of Machine Elements", "3-Principles of Management", "4-Heat and Mass Transfer", "5-Computer Aided Design", "6-Metrology and Measurements", "7-Principles of Management"};
    String[] tmechaonefriday = {"1-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab", "2-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab", "3-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab", "4-Computer Aided Design", "5-Design of Machine Elements", "6-Dynamics of Machines(T)", "7-Design of Machine Elements"};



    String[] frmechaonemonday = {"1-Simulation and Analysis lab/Mechatronics lab", "2-Simulation and Analysis lab/Mechatronics lab", "3-Simulation and Analysis lab/Mechatronics lab", "4-Mechatronics", "5-Robotics/Maintenance Engineering", "6-Process Planning and Cost Estimation/Welding Technology", "7-Comprehension"};
    String[] frmechaonetuesday = {"1-Computer Integrated Manufacturing Systems", "2-Total Quality Management", "3-Computer Integrated Manufacturing Systems", "4-Power Plant Engineering", "5-Robotics/Maintenance Engineering", "6-Process Planning and Cost Estimation/Welding Technology", "7-Placement (T1)"};
    String[] frmechaonewednesday = {"1-Total Quality Management", "2-Process Planning and Cost Estimation/Welding Technology", "3-Robotics/Maintenance Engineering", "4-Computer Integrated Manufacturing Systems", "5-Simulation and Analysis lab/Mechatronics lab", "6-Simulation and Analysis lab/Mechatronics lab", "7-Simulation and Analysis lab/Mechatronics lab"};
    String[] frmechaonethursday = {"1-Mechatronics", "2-Power Plant Engineering", "3-Mechatronics", "4-Power Plant Engineering", "5-Total Quality Management", "6-Computer Integrated Manufacturing Systems", "7-Placement(T2)"};
    String[] frmechaonefriday = {"1-Power Plant Engineering", "2-Robotics/Maintenance Engineering", "3-Process Planning and Cost Estimation/Welding Technology", "4-Library", "5-Comprehension", "6-Total Quality Management", "7-Mechatronics"};


    //even sem for second,third and fourth year mech b section



//even sem for second,third and fourth year mech b section

    //mech b 1st yr
    String[] fmechbtwomonday = {"1-Material Science", "2-Programming for Problem Solving", "3-Engineering Mathematics II", "4-Engineering Mechanics", "5-Library", "6-Technical English", "7-Environmental Science and Engineering"};
    String[] fmechbtwotuesday = {"1-Technical English", "2-Engineering Mechanics", "3-Environmental Science and Engineering", "4-Seminar 1", "5-Programming for Problem Solving", "6-Material Science", "7-Engineering Mathematics II"};
    String[] fmechbtwowednesday = {"1-Programming for Problem Solving", "2-Engineering Mathematics II", "3-Material Science", "4-Engineering Mechanics", "5-Environmental Science and Engineering", "6-Seminar 2", "7-Technical English"};
    String[] fmechbtwothursday = {"1-Engineering Mathematics II", "2-Seminar 3", "3-Technical English", "4-Material Science", "5-Programming for Problem Solving Labratory", "6-Programming for Problem Solving Labratory", "7-Programming for Problem Solving Labratory"};
    String[] fmechbtwofriday = {"1-Machine Drawing Lab", "2-Machine Drawing Lab", "3-Machine Drawing Lab", "4-Environmental Science and Engineering", "5-Engineering Mechanics", "6-Engineering Mathematics II", "7-Programming for Problem Solving"};

    //mech b 2nd yr
    String[] smechbtwomonday = {"1-Environmental Science and Engineering", "2-COmputational Methods", "3-MAnufacturing Technology II", "4-Thermal Engineering", "5-COmputational Methods", "6-MAnufacturing Technology II", "7-Fluid Mechanics and Machinery"};
    String[] smechbtwotuesday = {"1-Fluid Mechanics and Machinery", "2-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "3-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "4-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "5-Thermal Engineering", "6-MAnufacturing Technology II", "7-Kinetics of Machinery"};
    String[] smechbtwowednesday = {"1-Thermal Engineering", "2-Kinetics of Machinery", "3-Environmental Science and Engineering", "4-COmputational Methods", "5-Fluid Mechanics and Machinery", "6-COmputational Methods", "7-Thermal Engineering"};
    String[] smechbtwothursday = {"1-COmputational Methods", "2-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "3-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "4-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "5-Thermal Engineering", "6-COmputational Methods", "7-Environmental Science and Engineering"};
    String[] smechbtwofriday = {"1-MAnufacturing Technology II", "2-Thermal Engineering", "3-Kinetics of Machinery", "4-Fluid Mechanics and Machinery", "5-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "6-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab", "7-Manufacturing Technology Lab II/Thermal Engineering Lab I/Fluid Mechanics and Machinery Lab"};

    //mech b 3rd yr
    String[] tmechbtwomonday = {"1-Automobile Engineering", "2-Design of Transmission Systems", "3-Hydraulics and Pneumatics", "4-Placement", "5-Gas Dynamics and Jet Propulsion", "6-Finite Element Analysis", "7-Design and Fabrication Project"};
    String[] tmechbtwotuesday = {"1-Gas Dynamics and Jet Propulsion", "2-CAD/CAM Lab", "3-CAD/CAM Lab", "4-CAD/CAM Lab", "5-Automobile Engineering", "6-Finite Element Analysis", "7-Placement"};
    String[] tmechbtwowednesday = {"1-Finite Element Analysis", "2-Hydraulics and Pneumatics", "3-Finite Element Analysis", "4-Placement", "5-Quality Control and Reliability Engineering/Renewable Source of Energy/Unconventional Machining Processes", "6-Interview and Career Skills Lab", "7-Interview and Career Skills Lab"};
    String[] tmechbtwothursday = {"1-Gas Dynamics and Jet Propulsion", "2-Hydraulics and Pneumatics", "3-Finite Element Analysis", "4-Quality Control and Reliability Engineering/Renewable Source of Energy/Unconventional Machining Processes", "5-Design of Transmission Systems", "6-Interview and Career Skills Lab", "7-Interview and Career Skills Lab"};
    String[] tmechbtwofriday = {"1-Quality Control and Reliability Engineering/Renewable Source of Energy/Unconventional Machining Processes", "2-Design of Transmission Systems", "3-Automobile Engineering", "4-Placement", "5-Design and Fabrication Project", "6-Design and Fabrication Project", "7-Design and Fabrication Project"};

    //mech b 4th yr
    String[] frmechbtwomonday = {"1-Engineerng Economics", "2-Entrepreneurship Development", "3-Engineerng Economics", "4-Entrepreneurship Development", "5-Advanced IC Engines/Additive Manufacturing/Non Destructive Testing and Materials", "6-Advanced IC Engines/Additive Manufacturing/Non Destructive Testing and Materials", "7-Project Work"};
    String[] frmechbtwotuesday = {"1-Entrepreneurship Development", "2-Advanced IC Engines/Additive Manufacturing/Non Destructive Testing and Materials", "3-Engineerng Economics", "4-Advanced IC Engines/Additive Manufacturing/Non Destructive Testing and Materials", "5-Entrepreneurship Development", "6-Engineerng Economics", "7-Project Work"};
    String[] frmechbtwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frmechbtwothursday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frmechbtwofriday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    // odd sem for second,third and fourth year mech b section

    String[] fmechbonemonday = {"1-Basic Electrical and Electronics Engineering", "2-Mathematics-I", "3-Communicative English", "4-Seminar I", "5-Engineering Physics I", "6-Mathematics I", "7-Engineering Chemistry I"};
    String[] fmechbonetuesday = {"1-Communicative English", "2-Mathematics", "3-Seminar 2", "4-Communicative English", "5-Engineering Physics I", "6-Engineering Chemistry I", "7-Library","8-Sports"};
    String[] fmechbonewednesday = {"1-Engineering Chemistry-I", "2-Physics/Chemistry lab", "3-Physics/Chemistry lab", "4-Basic Electrical and Electronics Engineering", "5-Physics", "6-Mathematics-I", "7-Basic Electrical and Electronics Engineering"};
    String[] fmechbonethursday = {"1-Engineering Drawing", "2-Engineering Drawing", "3-Engineering Drawing", "4-Mathematics", "5-Engineering Practice Laboratory", "6-Engineering Practices Laboratory", "7-Engineering Practices Laboratory"};
    String[] fmechbonefriday = {"1-Engineering Physics I", "2-Basic Electrical and Electronics Engineering", "3-Communicative English", "4-Chemistry I", "5-Engineering Graphics", "6-Engineering Graphics", "7-Engineering Graphics"};





    String[] smechbonemonday = {"1-Engineering Thermodynamics", "2-Mathematics III", "3-Engineering Materials and Metallurgy", "4-Mechanics of Solids", "5-Strength of Materials lab/Electrical Engineering lab", "6-Strength of Materials lab/Electrical Engineering lab", "7-Strength of Materials lab/Electrical Engineering lab"};
    String[] smechbonetuesday = {"1-Manufacturing Technology I", "2-Engineering Materials and Metallurgy", "3-Engineering Thermodynamics", "4-Manufacturing Technology I", "5-Electrical Drives and Controls", "6-Mechanics of Solids", "7-Mechanics of Solids(Tutorial)"};
    String[] smechbonewednesday = {"1-Electrical Drives and Controls", "2-Mechanics of Solids", "3-Engineering Thermodynamics", "4-Mathematics III", "5-Electrical Drives and Controls/Engineering Materials and Metallurgy", "6-Manufacturing Technology I", "7-Engineering Materials and Metallurgy"};
    String[] smechbonethursday = {"1-Mathematics III", "2-Manufacturing Technology lab I/Electrical Engineering lab", "3-Manufacturing Technology lab I/Electrical Engineering lab", "4-Manufacturing Technology lab I/Electrical Engineering lab", "5-Mathematics III", "6-Manufacturing Technology I", "7-Engineering Thermodynamics"};
    String[] smechbonefriday = {"1-Mechanics of Solids", "2-Manufacturing Technology lab I/Strength of Materials lab", "3-Manufacturing Technology lab I/Strength of Materials lab", "4-Manufacturing Technology lab I/Strength of Materials lab", "5-Engineering Thermodynamics", "6-Electrical Drives and Controls", "7-Mathematics III(Tutorial)"};



    String[] tmechbonemonday = {"1-Computer Aided Design", "2-Heat and Mass Transfer", "3-Principls of Management", "4-Dynamics of Machines", "5-Design of Machine Elements", "6-Computer Aided Design", "7-Metrology and Measurements"};
    String[] tmechbonetuesday = {"1-Heat and Mass Transfer", "2-Dynamics of Machines", "3-Metrology and Measurements", "4-Principls of Management", "5-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab", "6-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab", "7-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab"};
    String[] tmechbonewednesday = {"1-Design of Machine Elements", "2-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab", "3-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab", "4-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab", "5-Heat and Mass Transfer", "6-Computer Aided Design", "7-Design of Machine Elements(T)"};
    String[] tmechbonethursday = {"1-Metrology and Measurements", "2-Dynamics of Machines", "3-Principls of Management", "4-Design of Machine Elements", "5-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab", "6-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab", "7-Dynamics lab/Thermal Engineering lab II/Metrology and Measurements lab"};
    String[] tmechbonefriday = {"1-Principls of Management", "2-Computer Aided Design", "3-Heat and Mass Transfer", "4-Dynamics of Machines", "5-Design of Machine Elements", "6-Metrology and Measurements", "7-Heat and Mass transfer(T)"};

    String[] frmechbonemonday = {"1-Power Plant Engineering", "2-Computer Integrated Manufacturing Systems", "3-Mechatronics", "4-Total Quality Management", "5-Robotics/Maintenance Engineering", "6-Process Planning and Cost Estimation/Welding Technology", "7-Placement(T3)"};
    String[] frmechbonetuesday = {"1-Simulation and Analysis lab/Mechatronics lab", "2-Simulation and Analysis lab/Mechatronics lab", "3-Simulation and Analysis lab/Mechatronics lab", "4-Computer Integrated Manufacturing Systems", "5-Robotics/Maintenance Engineering", "6-Process Planning and Cost Estimation/Welding Technology", "7-Placement(T4)"};
    String[] frmechbonewednesday = {"1-Total Quality Management", "2-Process Planning and Cost Estimation/Welding Technology", "3-Robotics/Maintenance Engineering", "4-Power Plant Engineering", "5-Mechatronics", "6-Comprehension", "7-Library"};
    String[] frmechbonethursday = {"1-Computer Integrated Manufacturing Systems", "2-Total Quality Management", "3-Mechatronics", "4-Power Plant Engineering", "5-Simulation and Analysis lab/Mechatronics lab", "6-Simulation and Analysis lab/Mechatronics lab", "7-Simulation and Analysis lab/Mechatronics lab"};
    String[] frmechbonefriday = {"1-Mechatronics", "2-Robotics/Maintenance Engineering", "3-Process Planning and Cost Estimation/Welding Technology", "4-Total Quality Management", "5-Comprehension", "6-Power Plant Engineering", "7-Computer Integrated Manufacturing Systems"};


    //marine odd sem


    //marine 1st year

    String[] fmarineconemonday = {"1-Mathematics for Marine Engineering-I", "2-Computer Programming", "3-Engineering Physics-I", "4-Computer Programming ", "5-Technical English-I ", "6-Chemistry for Marine Engineering-I", "7-Mathematics for Marine Engineering-I", "8-Basics of Marine Engineering"};
    String[] fmarineconetuesday = {"1-Basics of Mrine Engineering ", "2-Physics and Chemistry Laboratory-I", "3-Physics and Chemistry Laboratory-I ","4-Basics Of Marine Engineering ", "5-Chemistry for Marine Engineering-I", "6-Engineering Physics-I", "7-Chemistry for Marine Engineering-I", "8-Engineering Physics-I"};
    String[] fmarineconewednesday = {"1-Engineering Graphics", "2-Engineering Graphics", "3-Engineering Graphics ", "4-Mathematics for Marine Engineering-I", "5-Marine Engineering Practise Laboratory", "6-Marine Engineering Practise Laboratory", "7-Marine Engineering Practise Laboratory", "8-Marine Engineering Practise Laboratory"};
    String[] fmarineconethursday = {"1-Engineering Physics-I", "2-Mathematics for Marine Engineering-I", "3-Technical English-I", "4-Chemistry for Marine Engineering-I", "5-Technical English-I", "6-Engineering Graphics", "7-Engineering Graphics", "8-Engineering Graphics"};
    String[] fmarineconefriday = {"1-Technical English-I ", "2-Mathematics for Marine Engineering-I", "3-Chemistry for Marine Engineering-I", "4-Computer Programming", "5-Computer Practise Laboratory", "6-Computer Practise Laboratory", "7-Computer Practise Laboratory", "8-Basics of Marine Engineering"};

    //marine 2nd yr
    String[] smarineconemonday = {"1-Marine Manufacturing Technology", "2-Marine Electrical Machines – I", "3-Seamanship,Elementary Navigation and Survival at sea ", "4-Marine Electrical Machines – I", "5-Marine Manufacturing Technology", "6-Mathematics III", "7-Stability of ships", "8-Marine Hydraulics and fluid Machinery"};
    String[] smarineconetuesday = {"1-Mathematics-III", "2-Welding Techniques, Lathe and Special Machine shops(Lathe) ", "3-Welding Techniques, Lathe and Special Machine shops(Lathe)", "4-Welding Techniques, Lathe and Special Machine shops(Lathe)", "5-Marine Steam Engines", "6-Marine Manufacturing Technology", "7-Marine Electrical Machines (T)"};
    String[] smarineconewednesday = {"1-Marine Electrical Machines -I", "2-Marine hydraulics and Fluid machinery ", "3-Mathematics III", "4-Seamanship,Elementary Navigation and Survival at sea ", "5-Marine hydraulics and Fluid machinery lab", "6-Marine hydraulics and Fluid machinery lab", "7-Marine hydraulics and Fluid machinery lab"};
    String[] smarineconethursday = {"1-Marine Machinery Drawing", "2-Marine Machinery Drawing", "3-Seamanship,Elementary Navigation and Survival at sea ", "4-Marine Manufacturing Technology", "5-Marine hydraulics and Fluid machinery", "6-Marine Steam Engines", "7-Mathematics III(T)"};
    String[] smarineconefriday = {"1-Seamanship,Elementary Navigation and Survival at sea", "2-Mathematics III", "3-Marine hydraulics and Fluid machinery", "4-Marine Electrical Machines-I", "5-Welding Techniques, Lathe and Special Machine shops (Welding)", "6-Welding Techniques, Lathe and Special Machine shops(Welding)", "7-Welding Techniques, Lathe and Special Machine shops(Welding)"};
    String[] smarineconesaturday = {"1-Marine Steam Engines", "2-Library", "3-Marine Steam Engines", "4-Marine Machinery Drawing", "5-Marine Machinery Drawing", "6-Marine Machinery Drawing", "7-Marine Machinery Drawing"};

    //marine 3rd year

    String[] tmarineconemonday = {"1-Marine Auxiliary Machinery -II", "2-Marine Electronics", "3-Marine Diesel enignes -II", "4-Marine Propulsion and Auxliary Machies lab ", "5-Marine Propulsion and Auxliary Machies lab ", "6-Marine Propulsion and Auxliary Machies lab", "7-Marine Propulsion and Auxliary Machies lab"};
    String[] tmarineconetuesday = {"1-Marine Electrical Machines – II ", "2-Marine Diesel enignes -II", "3-Marine Electronics", "4-Library", "5-Ship Construction", "6-Marine Auxiliary Machinery -II (T)", "7-Mechanics of Marine Machines"};
    String[] tmarineconewednesday = {"1-Ship Construction", "2-Marine Electrical Machines – II ", "3-Marine Diesel engines -II ", "4-Marine Auxiliary Machinery -II", "5-Mechanics of Marine Machines(Electrical)", "6-Electrical, Electronics and Microprocessor Lab(Electrical)", "7-Electrical, Electronics and Microprocessor Lab(Electrical)"};
    String[] tmarineconethursday = {"1-Mechanics of Marine Machines", "2-Marine Electronics", "3-Library", "4-Marine Diesel enignes -II", "5-Electrical, Electronics and Microprocessor Lab(Electronics)", "6-Electrical, Electronics and Microprocessor Lab(Electronics)", "7-Electrical, Electronics and Microprocessor Lab(Electronics)"};
    String[] tmarineconefriday = {"1- Marine Diesel enignes -II", "2-Marine Electronics", "3-Marine Auxiliary Machinery -II", "4-Measurement and Instrumentation Lab ", "5-Measurement and Instrumentation Lab", "6-Measurement and Instrumentation Lab", "7-Measurement and Instrumentation Lab"};
    String[] tmarineconesaturday = {"1-Ship Construction ", "2-Mechanics of Marine Machines", "3-Mechanics of Marine Machines", "4-Marine Electrical Machines – II ", "5-Marine Electrical Machines – II", "6-Ship Construction", "7-Library"};

    //marine 4th yr

    String[] frmarineconemonday = {"1-Marine System and Machinery Design", "2-Ship’s Fire Prevention and Control", "3-Marine Auxiliary Machinery – II", "4-Fire Fighting, Controls and Simulator Laboratory", "5-Fire Fighting, Controls and Simulator Laboratory", "6-Fire Fighting, Controls and Simulator Laboratory", "7-Fire Fighting, Controls and Simulator Laboratory"};
    String[] frmarineconetuesday = {"1-Marine Vehicles Performance  ", "2-Marine System and Machinery Design ", "3-Marine Auxiliary Machinery – II ", "4-Marine System and Machinery Design ", "5-Marine Electrical Technology ", "6-Library", "7-Ship’s Fire Prevention and Control"};
    String[] frmarineconewednesday = {"1-Advanced Marine Heat Engines", "2-Marine Auxiliary Machinery – II ", "3-Marine Vehicles Performance", "4-Marine Electrical Technology", "5-Ship’s Fire Prevention and Control", "6-Marine System and Machinery Design (T)", "7-Library"};
    String[] frmarineconethursday = {"1-Ship’s Fire Prevention and Control", "2-Marine System and Machinery Design ", "3-Training Assesment Record", "4-Marine Propulsion and Auxiliary Machineries Overhauling lab ", "5-Marine Propulsion and Auxiliary Machineries Overhauling lab", "6-Marine Propulsion and Auxiliary Machineries Overhauling lab", "7-Marine Propulsion and Auxiliary Machineries Overhauling lab"};
    String[] frmarineconefriday = {"1-Communication skills lab", "2-Communication skills lab", "3-Communication skills lab", "4-Communication skills lab", "5-Marine System and Machinery Design", "6-Marine Auxiliary Machinery – II", "7-Marine Vehicles Performance(T)"};
    String[] frmarineconesaturday = {"1-Marine Electrical Technology", "2-Marine Electrical Technology ", "3-Marine Vehicles Performance", "4-Marine System and Machinery Design", "5-Marine Vehicles Performance(T)", "6-Advanced Marine Heat Engines", "7-Training Assesment Record"};


    // marine even sem
    //marine 1st yr
    String[] fmarinectwomonday = {"1-Marine engineering thermodynamics", "2-EVS", "3-Mathematics for marine II", "4- Computer Applications", "5-LIB", "6-LIB", "7-LIB"};
    String[] fmarinectwotuesday ={"1-Technical english II", "2-Basics of marine engineering", "3-Mathematics for marine II", "4-LIB ", "5-EVS", "6-Marine engineering thermodynamics", "7-Engineering mechanics"};
    String[] fmarinectwowednesday = {"1-LIB", "2-Engineering mechanics ", "3-EVS", "4-Basics of marine engineering ", "5-Engineering mechanics", "6-Mathematics for marine II", "7-Marine engineering thermodynamics"};
    String[] fmarinectwothursday = {"1-Computer applications", "2-Computer application", "3-Marine engineering thermodynamics", "4-Marine engineering thermodynamics ", "5-Technical english II", "6-Mathematics for marine II", "7-Basics of marine engineering"};
    String[] fmarinectwofriday = {"1-EVS", "2-Mathematics for marine II", "3-Computer Applications", "4- Technical english II", "5-CAD LAB", "6-CAD LAB", "7-CAD LAB"};
    String[] fmarinectwosaturday = {"1-Basics of marine engineering", "2-LIB", "3-Marine engineering thermodynamics", "4- Workshop fitting", "5-", "6-Workshop fitting", "7-Workshop fitting"};

    //marine 2nd yr
    String[] smarinectwomonday = {"1-Computational methods", "2-Marine diesel engines-1", "3-Marine auxillary machinery I", "4-Strength of materials and applied mechanics lab ", "5-Strength of materials and applied mechanics lab ", "6-Strength of materials and applied mechanics lab", "7-Strength of materials and applied mechanics lab"};
    String[] smarinectwotuesday = {"1-Marine diesel engines-1", "2-Mechanics of solid", "3-Marine refrigiration and air conditioning", "4- Computational methods", "5-Thermal engineering and boiler lab ", "6-Thermal engineering and boiler lab", "7-Thermal engineering and boiler lab"};
    String[] smarinectwowednesday = {"1-Marine auxillary machinery I", "2-Marine boilers and steam turbines", "3-Marine boilers and steam turbines", "4-Mechanics of solid ", "5-Engineering materials,metallurgy,metrology ",  "6-Computational methods", "7-Marine diesel engines-1"};
    String[] smarinectwothursday = {"1-Mechanics of solid  ", "2-Marine boilers and steam turbines", "3-Computational methods", "4-Marine auxillary machinery I ", "5-Marine diesel engines-1 ", "6-Thermal engineering and boiler lab", "7-Thermal engineering and boiler lab"};
    String[] smarinectwofriday ={"1-Marine refrigiration and air conditioning", "2-Computational methods", "3-Mechanics of solid", "4-Marine diesel engines-1 ", "5-Mechanics of solid ", "6-Marine auxillary machinery I", "7-Marine boilers and steam turbines"};
    String[] smarinectwosaturday ={"1-Engineering materials,metallurgy,metrology", "2-Marine refrigiration and air conditioning", "3-Engineering materials,metallurgy,metrology", "4-LIB ", "5-Marine refrigiration and air conditioning ", "6-TAR", "7-LIB"};

    //marine 3rd yr
    String[] tmarinectwomonday = {"Marine Workshop Practical and afloat training"};
    String[] tmarinectwotuesday = {"Marine Workshop Practical and afloat training"};
    String[] tmarinectwowednesday = {"Marine Workshop Practical and afloat training"};
    String[] tmarinectwothursday = {"Marine Workshop Practical and afloat training"};
    String[] tmarinectwofriday = {"Marine Workshop Practical and afloat training"};

    //marine 4th yr
    String[] frmarinectwomonday = {"1-Safety Precautions and Watch Keeping", "2-Safety Precautions and Watch Keeping ", "3-Project Work, Technical Paper and Viva voice", "4-Marine Control Engineering and Automation", "5-Marine Control Engineering and Automation", "6-Project Work, Technical Paper and Viva voice", "7-Project Work, Technical Paper and Viva voice"};
    String[] frmarinectwotuesday = {"1-Project Work, Technical Paper and Viva voice ", "2-Ship Operational Management and IMO Requirements", "3- -Project Work, Technical Paper and Viva voice", "4-Safety Precautions and Watch Keeping ", "5-Safety Precautions and Watch Keeping ", "6-EVS ", "7- Project Work, Technical Paper and Viva voice"};
    String[] frmarinectwowednesday = {"1-EVS ", "2-Marine Corrosion and Prevention", "3-Project Work, Technical Paper and Viva voc  ", "4-Ship Operational Management and IMO Requirements", "5--Project Work, Technical Paper and Viva voice", "6-comprehension test ", "7-Project Work, Technical Paper and Viva voice"};
    String[] frmarinectwothursday = {"1-Marine Corrosion and Prevention ", "2-Marine Control Engineering and Automation ", "3-Project Work, Technical Paper and Viva voice ", "4-Environmental Science and Engineering ", "5-Project Work, Technical Paper and Viva voice ", "6-Project Work, Technical Paper and Viva voice", "7-Project Work, Technical Paper and Viva voice"};
    String[] frmarinectwofriday = {"1-Project Work, Technical Paper and Viva voice","2-Ship Operational Management and IMO Requirements","3-Project Work, Technical Paper and Viva voice ", "4-Marine Corrosion and Prevention ", "5-Marine Control Engineering and Automation ","6-Project Work, Technical Paper and Viva voice ","7-Project Work, Technical Paper and Viva voice"};
    String[] frmarinectwosaturday={"1-Comprehension test", "2-Marine corrosion and prevention", "3-Project Work, Technical Paper and Viva voice", "4-Project Work, Technical Paper and Viva voice ", "5-Marine corrosion and prevention", "6-LIB ", "7-TAR"};



    Integer r, x, y, z, t, d;

    @SuppressLint("NewApi")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.ttperiod);
        Bundle extras = getIntent().getExtras();
        x = extras.getInt("year");
        y = extras.getInt("sem");
        z = extras.getInt("sel");

        t = extras.getInt("sec");
        d = extras.getInt("day");
        listView = (ListView) findViewById(R.id.period);


        listView.setAdapter(new ArrayAdapter<String>(ttperiod.this, android.R.layout.simple_list_item_1, new ArrayList<String>()));

        switch (z) // getting the valuefor depatrmnt
        {
            case 1:// automobile
            {
                switch (t) { //section
                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all sem auto
                                    switch (y) {
                                        case 2:
                                            new Asyncfautotwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsautotwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctautotwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrautotwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all sem automobile
                                    switch (y) {
                                        case 2:
                                            new Asyncfautotwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsautotwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctautotwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrautotwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all sem automobile
                                    switch (y) {
                                        case 2:
                                            new Asyncfautotwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsautotwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctautotwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrautotwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all sem automobile
                                    switch (y) {
                                        case 2:
                                            new Asyncfautotwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsautotwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctautotwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrautotwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all sem autombile
                                    switch (y) {
                                        case 2:
                                            new Asyncfautotwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsautotwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctautotwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrautotwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all sem auto -odd sem
                                    switch (y) {
                                        case 1:
                                            new Asyncfautoonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsautoonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctautoonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrautoonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all sem automobile
                                    switch (y) {
                                        case 1:
                                            new Asyncfautoonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsautoonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctautoonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrautoonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all sem automobile
                                    switch (y) {
                                        case 1:
                                            new Asyncfautoonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsautoonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctautoonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrautoonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all sem automobile
                                    switch (y) {
                                        case 1:
                                            new Asyncfautoonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsautoonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctautoonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrautoonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all sem autombile
                                    switch (y) {
                                        case 1:
                                            new Asyncfautoonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsautoonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctautoonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrautoonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }
                } //end of switch t
                break;
            }
            case 2: // biotech
            {
                switch (t) { //section
                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem biotech
                                    switch (y) {
                                        case 2:
                                            new Asyncfbiotechtwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsbiotechtwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctbiotechtwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrbiotechtwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem biotech
                                    switch (y) {
                                        case 2:
                                            new Asyncfbiotechtwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsbiotechtwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctbiotechtwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrbiotechtwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem biotech
                                    switch (y) {
                                        case 2:
                                            new Asyncfbiotechtwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsbiotechtwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctbiotechtwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrbiotechtwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem biotech
                                    switch (y) {
                                        case 2:
                                            new Asyncfbiotechtwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsbiotechtwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctbiotechtwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrbiotechtwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem biotech
                                    switch (y) {
                                        case 2:
                                            new Asyncfbiotechtwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsbiotechtwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctbiotechtwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrbiotechtwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all biotech-odd sem
                                    switch (y) {
                                        case 1:
                                            new Asyncfbiotechonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsbiotechonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctbiotechonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrbiotechonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem bioetch
                                    switch (y) {
                                        case 1:
                                            new Asyncfbiotechonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsbiotechonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctbiotechonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrbiotechonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem biotech
                                    switch (y) {
                                        case 1:
                                            new Asyncfbiotechonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsbiotechonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctbiotechonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrbiotechonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem biotech
                                    switch (y) {
                                        case 1:
                                            new Asyncfbiotechonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsbiotechonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctbiotechonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrbiotechonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all sem autombile
                                    switch (y) {
                                        case 1:
                                            new Asyncfbiotechonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsbiotechonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctbiotechonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrbiotechonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    } //end of case 1 i.e a section's case part
                } //end of switch t
                break;
            }

            case 3: // chemical
            {
                switch (t)       // selecting the respective section
                {

                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem chemical
                                    switch (y) {
                                        case 2:
                                            new Asyncfchematwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncschematwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctchematwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchematwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem chemical
                                    switch (y) {
                                        case 2:
                                            new Asyncfchematwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncschematwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctchematwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchematwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem chemical
                                    switch (y) {
                                        case 2:
                                            new Asyncfchematwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncschematwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctchematwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchematwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem chemical
                                    switch (y) {
                                        case 2:
                                            new Asyncfchematwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncschematwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctchematwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchematwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem chemical
                                    switch (y) {
                                        case 2:
                                            new Asyncfchematwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncschematwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctchematwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchematwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all sem chem -odd sem
                                    switch (y) {
                                        case 1:
                                            new Asyncfchemaonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncschemaonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctchemaonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchemaonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd chemical
                                    switch (y) {
                                        case 1:
                                            new Asyncfchemaonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncschemaonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctchemaonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchemaonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem chemical
                                    switch (y) {
                                        case 1:
                                            new Asyncfchemaonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncschemaonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctchemaonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchemaonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem chemical
                                    switch (y) {
                                        case 1:
                                            new Asyncfchemaonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncschemaonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctchemaonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchemaonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem chemical
                                    switch (y) {
                                        case 1:
                                            new Asyncfchemaonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncschemaonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctchemaonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchemaonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }
                    case 2: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem chemical b
                                    switch (y) {
                                        case 2:
                                            new Asyncfchembtwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncschembtwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctchembtwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchembtwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem chemical b
                                    switch (y) {
                                        case 2:
                                            new Asyncfchembtwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncschembtwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctchembtwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchembtwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem chemical b
                                    switch (y) {
                                        case 2:
                                            new Asyncfchembtwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncschembtwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctchembtwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchembtwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem chemical b
                                    switch (y) {
                                        case 2:
                                            new Asyncfchembtwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncschembtwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctchembtwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchembtwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem chemical b
                                    switch (y) {
                                        case 2:
                                            new Asyncfchembtwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncschembtwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctchembtwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchembtwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem chemical b
                                    switch (y) {
                                        case 1:
                                            new Asyncfchembonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncschembonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctchembonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchembonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem chemical b
                                    switch (y) {
                                        case 1:
                                            new Asyncfchembonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncschembonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctchembonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchembonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem chemicAl b
                                    switch (y) {
                                        case 1:
                                            new Asyncfchembonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncschembonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctchembonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchembonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem chemical b
                                    switch (y) {
                                        case 1:
                                            new Asyncfchembonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncschembonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctchembonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchembonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem chemical b
                                    switch (y) {
                                        case 1:
                                            new Asyncfchembonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncschembonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctchembonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchembonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }
                } //end of switch t
                break;
            }
            case 4: // civil
            {

                switch (t) {
                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem civil
                                    switch (y) {
                                        case 2:
                                            new Asyncfciviltwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsciviltwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctciviltwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrciviltwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem civil
                                    switch (y) {
                                        case 2:
                                            new Asyncfciviltwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsciviltwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctciviltwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrciviltwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem civil
                                    switch (y) {
                                        case 2:
                                            new Asyncfciviltwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsciviltwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctciviltwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrciviltwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem civil
                                    switch (y) {
                                        case 2:
                                            new Asyncfciviltwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsciviltwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctciviltwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrciviltwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem civil
                                    switch (y) {
                                        case 2:
                                            new Asyncfciviltwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsciviltwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctciviltwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrciviltwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem civil
                                    switch (y) {
                                        case 1:
                                            new Asyncfcivilonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncscivilonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctcivilonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcivilonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem civil
                                    switch (y) {
                                        case 1:
                                            new Asyncfcivilonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscivilonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcivilonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcivilonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem civil
                                    switch (y) {
                                        case 1:
                                            new Asyncfcivilonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscivilonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcivilonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcivilonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for odd sem civil
                                    switch (y) {
                                        case 1:
                                            new Asyncfcivilonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncscivilonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctcivilonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcivilonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem civil
                                    switch (y) {
                                        case 1:
                                            new Asyncfcivilonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncscivilonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctcivilonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcivilonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }
                }
                break;
            }
            case 5: //eee
            {
                switch (t)       // selecting the respective section
                {

                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem eee a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeeatwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeeatwomonday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeeatwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeeatwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem eee a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeeatwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeeatwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeeatwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeeatwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem eee a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeeatwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeeatwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeeatwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeeatwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem eee a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeeatwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeeatwothursday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeeatwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeeatwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem eee a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeeatwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeeatwofriday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeeatwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeeatwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem eee a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeeaonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeeaonemonday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeeaonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeeaonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem eee a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeeaonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeeaonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeeaonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeeaonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem eee a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeeaonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeeaonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeeaonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeeaonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem eee a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeeaonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeeaonethursday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeeaonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeeaonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem eee a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeeaonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeeaonefriday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeeaonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeeaonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                    case 2: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem eee b
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeebtwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeebtwomonday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeebtwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeebtwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem eee b
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeebtwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeebtwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeebtwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeebtwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem eee b
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeebtwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeebtwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeebtwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeebtwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem eee b
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeebtwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeebtwothursday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeebtwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeebtwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem eee b
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeebtwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeebtwofriday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeebtwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeebtwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem eee b
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeebonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeebonemonday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeebonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeebonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem eee b
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeebonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeebonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeebonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeebonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem eee b
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeebonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeebonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeebonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeebonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem eee b
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeebonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeebonethursday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeebonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeebonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem eee b
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeebonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncfeeebonefriday().execute();
                                            break;
                                        case 5:
                                            new Asyncfeeebonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfeeebonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                }
                break;

            }
            case 6: // it
            {
                switch (t)       // selecting the respective section
                {

                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem it a
                                    switch (y) {
                                        case 2:
                                            new Asyncfitatwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitatwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctitatwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritatwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem it a
                                    switch (y) {
                                        case 2:
                                            new Asyncfitatwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitatwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctitatwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritatwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem it a
                                    switch (y) {
                                        case 2:
                                            new Asyncfitatwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitatwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctitatwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritatwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem it a
                                    switch (y) {
                                        case 2:
                                            new Asyncfitatwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitatwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctitatwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritatwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem it a
                                    switch (y) {
                                        case 2:
                                            new Asyncfitatwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitatwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctitatwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritatwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem it a
                                    switch (y) {
                                        case 1:
                                            new Asyncfitaonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitaonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctitaonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritaonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem it a
                                    switch (y) {
                                        case 1:
                                            new Asyncfitaonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitaonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctitaonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritaonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem it a
                                    switch (y) {
                                        case 1:
                                            new Asyncfitaonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitaonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctitaonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritaonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem it a
                                    switch (y) {
                                        case 1:
                                            new Asyncfitaonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitaonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctitaonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritaonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem it a
                                    switch (y) {
                                        case 1:
                                            new Asyncfitaonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitaonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctitaonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritaonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                    case 2: {  //it b
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem it b
                                    switch (y) {
                                        case 2:
                                            new Asyncfitbtwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitbtwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctitbtwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritbtwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem it b
                                    switch (y) {
                                        case 2:
                                            new Asyncfitbtwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitbtwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctitbtwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritbtwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem it  b
                                    switch (y) {
                                        case 2:
                                            new Asyncfitbtwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitbtwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctitbtwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritbtwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem it b
                                    switch (y) {
                                        case 2:
                                            new Asyncfitbtwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitbtwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctitbtwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritbtwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem it b
                                    switch (y) {
                                        case 2:
                                            new Asyncfitbtwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitbtwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctitbtwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritbtwofriday().execute();
                                            break;
                                    }
                                    break;
                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem it b
                                    switch (y) {
                                        case 1:
                                            new Asyncfitbonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitbonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctitbonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritbonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem it b
                                    switch (y) {
                                        case 1:
                                            new Asyncfitbonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitbonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctitbonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritbonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem it b
                                    switch (y) {
                                        case 1:
                                            new Asyncfitbonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitbonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctitbonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritbonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem it b
                                    switch (y) {
                                        case 1:
                                            new Asyncfitbonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitbonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctitbonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritbonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem it b
                                    switch (y) {
                                        case 1:
                                            new Asyncfitbonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitbonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctitbonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritbonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                }
                break;
            }
            case 7://ece
            {
                switch (t)       // selecting the respective section
                {

                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem ece a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeceatwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncseceatwomonday().execute();
                                            break;
                                        case 6:
                                            new Asyncteceatwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreceatwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem ece a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeceatwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncseceatwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asyncteceatwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreceatwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem ece a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeceatwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncseceatwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asyncteceatwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreceatwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem ece a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeceatwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncseceatwothursday().execute();
                                            break;
                                        case 6:
                                            new Asyncteceatwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreceatwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem ece a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeceatwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncseceatwofriday().execute();
                                            break;
                                        case 6:
                                            new Asyncteceatwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreceatwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem ece a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeceaonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncseceaonemonday().execute();
                                            break;
                                        case 5:
                                            new Asyncteceaonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreceaonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem ece a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeceaonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncseceaonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asyncteceaonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreceaonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem ece a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeceaonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncseceaonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asyncteceaonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreceaonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem ece a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeceaonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncseceaonethursday().execute();
                                            break;
                                        case 5:
                                            new Asyncteceaonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreceaonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem ece a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeceaonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncseceaonefriday().execute();
                                            break;
                                        case 5:
                                            new Asyncteceaonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreceaonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                    case 2: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem ece b
                                    switch (y) {
                                        case 2:
                                            new Asyncfecebtwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecebtwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctecebtwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecebtwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem ece b
                                    switch (y) {
                                        case 2:
                                            new Asyncfecebtwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecebtwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctecebtwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecebtwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem ece b
                                    switch (y) {
                                        case 2:
                                            new Asyncfecebtwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecebtwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctecebtwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecebtwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem ece b
                                    switch (y) {
                                        case 2:
                                            new Asyncfecebtwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecebtwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctecebtwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecebtwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem ece b
                                    switch (y) {
                                        case 2:
                                            new Asyncfecebtwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecebtwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctecebtwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecebtwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem ece b
                                    switch (y) {
                                        case 1:
                                            new Asyncfecebonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsecebonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctecebonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrecebonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem ece b
                                    switch (y) {
                                        case 1:
                                            new Asyncfecebonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsecebonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctecebonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrecebonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem ece b
                                    switch (y) {
                                        case 1:
                                            new Asyncfecebonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsecebonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctecebonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrecebonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem ece b
                                    switch (y) {
                                        case 1:
                                            new Asyncfecebonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsecebonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctecebonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrecebonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem ece b
                                    switch (y) {
                                        case 1:
                                            new Asyncfecebonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsecebonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctecebonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrecebonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }
                    case 3: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem ece c
                                    switch (y) {
                                        case 2:
                                            new Asyncfecectwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecectwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctecectwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecectwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem ece c
                                    switch (y) {
                                        case 2:
                                            new Asyncfecectwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecectwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctecectwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecectwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem ece c
                                    switch (y) {
                                        case 2:
                                            new Asyncfecectwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecectwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctecectwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecectwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem ece c
                                    switch (y) {
                                        case 2:
                                            new Asyncfecectwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecectwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctecectwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecectwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem ece c
                                    switch (y) {
                                        case 2:
                                            new Asyncfecectwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecectwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctecectwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecectwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem ece c
                                    switch (y) {
                                        case 1:
                                            new Asyncfececonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsececonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctececonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrececonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem ece c
                                    switch (y) {
                                        case 1:
                                            new Asyncfececonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsececonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctececonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrececonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem ece c
                                    switch (y) {
                                        case 1:
                                            new Asyncfececonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsececonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctececonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrececonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem ece c
                                    switch (y) {
                                        case 1:
                                            new Asyncfececonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsececonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctececonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrececonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem ece c
                                    switch (y) {
                                        case 1:
                                            new Asyncfececonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsececonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctececonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrececonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                }
                break;
            }
            case 8: // cse
            {
                switch (t)       // selecting the respective section
                {

                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem cse a
                                    switch (y) {
                                        case 2:
                                            new Asyncfcseatwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncscseatwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctcseatwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcseatwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem cse a
                                    switch (y) {
                                        case 2:
                                            new Asyncfcseatwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncscseatwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctcseatwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcseatwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem cse a
                                    switch (y) {
                                        case 2:
                                            new Asyncfcseatwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncscseatwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctcseatwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcseatwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem cse a
                                    switch (y) {
                                        case 2:
                                            new Asyncfcseatwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncscseatwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctcseatwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcseatwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem cse a
                                    switch (y) {
                                        case 2:
                                            new Asyncfcseatwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncscseatwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctcseatwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcseatwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem cse a
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseaonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseaonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseaonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseaonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem cse a
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseaonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseaonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseaonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseaonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem cse a
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseaonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseaonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseaonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseaonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem cse a
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseaonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseaonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseaonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseaonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem cse a
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseaonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseaonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseaonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseaonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                    case 2: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem cse b
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsebtwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsebtwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsebtwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsebtwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem cse b
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsebtwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsebtwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsebtwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsebtwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem cse b
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsebtwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsebtwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsebtwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsebtwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem cse b
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsebtwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsebtwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsebtwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsebtwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem cse b
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsebtwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsebtwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsebtwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsebtwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem cse b
                                    switch (y) {
                                        case 1:
                                            new Asyncfcsebonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncscsebonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctcsebonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcsebonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem cse b
                                    switch (y) {
                                        case 1:
                                            new Asyncfcsebonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscsebonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcsebonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcsebonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem cse b
                                    switch (y) {
                                        case 1:
                                            new Asyncfcsebonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscsebonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcsebonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcsebonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem  cse b
                                    switch (y) {
                                        case 1:
                                            new Asyncfcsebonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncscsebonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctcsebonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcsebonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem cse b
                                    switch (y) {
                                        case 1:
                                            new Asyncfcsebonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncscsebonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctcsebonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcsebonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }
                    case 3: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem cse c
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsectwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsectwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsectwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsectwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem cse c
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsectwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsectwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsectwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsectwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem cse c
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsectwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsectwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsectwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsectwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem cse c
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsectwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsectwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsectwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsectwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem cse c
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsectwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsectwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsectwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsectwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem cse c
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseconemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseconemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseconemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseconemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem cse c
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseconetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseconetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseconetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseconetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem cse c
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseconewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseaonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseconewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseconewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem cse c
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseconethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseconethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseconethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseconethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem cse c
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseconefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseconefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseconefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseconefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                }
                break;

            }
            case 9:  // mech
            {
                switch (t)       // selecting the respective section
                {

                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem mech a
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechatwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechatwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechatwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechatwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem mech a
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechatwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechatwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechatwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechatwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem mech a
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechatwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechatwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechatwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechatwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem mech a
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechatwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechatwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechatwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechatwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem mech a
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechatwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechatwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechatwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechatwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem mech a
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechaonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechaonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechaonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechaonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem mech a
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechaonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechaonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechaonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechaonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem mech a
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechaonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechaonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechaonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechaonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem mech a
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechaonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechaonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechaonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechaonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem mech a
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechaonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechaonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechaonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechaonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                    case 2: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem mech b
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechbtwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechbtwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechbtwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechbtwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem mech b
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechbtwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechbtwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechbtwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechbtwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem mech b
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechbtwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechbtwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechbtwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechbtwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem mech b
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechbtwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechbtwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechbtwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechbtwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem mech b
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechbtwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechbtwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechbtwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechbtwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem mech b
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechbonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechbonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechbonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechbonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem mech b
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechbonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechbonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechbonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechbonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem mech b
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechbonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechbonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechbonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechbonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem mech b
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechbonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechbonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechbonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechbonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem mech b
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechbonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechbonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechbonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechbonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                }
                break;

            }
            case 10:// marine
            {
                switch (t) { //section
                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all sem auto
                                    switch (y) {
                                        case 2:
                                            new Asyncfmarinetwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmarinetwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctmarinetwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmarinetwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all sem automobile
                                    switch (y) {
                                        case 2:
                                            new Asyncfmarinetwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmarinetwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctmarinetwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmarinetwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all sem automobile
                                    switch (y) {
                                        case 2:
                                            new Asyncfmarinetwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmarinetwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctmarinetwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmarinetwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all sem automobile
                                    switch (y) {
                                        case 2:
                                            new Asyncfmarinetwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmarinetwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctmarinetwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmarinetwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all sem autombile
                                    switch (y) {
                                        case 2:
                                            new Asyncfmarinetwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmarinetwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctmarinetwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmarinetwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all sem marine -odd sem
                                    switch (y) {
                                        case 1:
                                            new Asyncfmarineonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmarineonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctmarineonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmarineonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all sem marine
                                    switch (y) {
                                        case 1:
                                            new Asyncfmarineonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmarineonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctmarineonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmarineonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all sem marine
                                    switch (y) {
                                        case 1:
                                            new Asyncfmarineonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmarineonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctmarineonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmarineonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all sem marine
                                    switch (y) {
                                        case 1:
                                            new Asyncfmarineonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmarineonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctmarineonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmarineonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all sem marine
                                    switch (y) {
                                        case 1:
                                            new Asyncfmarineonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmarineonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctmarineonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmarineonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }
                } //end of switch t
                break;
            }
        }

        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                switch (position) {
                    default: {
                        Toast.makeText(ttperiod.this, "Have a Great Day", Toast.LENGTH_SHORT).show();
                        break;
                    }


                }

            }
        });


    }

    //first yr marine odd sem
    public class Asyncfmarineonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);
            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmarineconemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmarineonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmarineconetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmarineonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmarineconewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmarineonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmarineconethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmarineonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmarineconefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    //second yr marine odd sem
    public class Asyncsmarineonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);
            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smarineconemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmarineonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smarineconetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmarineonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smarineconewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmarineonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smarineconethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmarineonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smarineconefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    //third yr marine odd sem
    public class Asynctmarineonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);
            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmarineconemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmarineonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmarineconetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmarineonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmarineconewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmarineonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmarineconethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmarineonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmarineconefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    //final yr marine odd sem

    public class Asyncfrmarineonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);
            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmarineconemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmarineonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmarineconetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmarineonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmarineconewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmarineonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmarineconethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmarineonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmarineconefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    //Marine even sem list
    public class Asyncfmarinetwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);
            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmarinectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmarinetwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmarinectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmarinetwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmarinectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmarinetwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmarinectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmarinetwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmarinectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    //second yr marine odd sem
    public class Asyncsmarinetwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);
            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smarinectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmarinetwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smarinectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmarinetwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smarinectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmarinetwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smarinectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmarinetwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smarinectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    //third yr marine odd sem
    public class Asynctmarinetwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);
            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmarinectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmarinetwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmarinectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmarinetwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmarinectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmarinetwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmarinectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmarinetwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmarinectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    //final yr marine odd sem

    public class Asyncfrmarinetwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);
            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmarinectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmarinetwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmarinectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmarinetwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmarinectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmarinetwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmarinectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmarinetwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmarinectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }






    public class Asyncfautoonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);
            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautoonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautoonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautoonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautoonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautoonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautoonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautoonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautoonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautoonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcivilonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcivilonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcivilonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcivilonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcivilonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcivilonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcivilonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcivilonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcivilonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcivilonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchemaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchemaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchemaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchemaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchemaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchemaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchemaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchemaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchemaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchemaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseconemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseconemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseconetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseconetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseconewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseconewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseconethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseconethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseconefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseconefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceaonethursay) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfececonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fececonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfececonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fececonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfececonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fececonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfececonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fececonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfececonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fececonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautotwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautotwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautotwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautotwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautotwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautotwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautotwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautotwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautotwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautotwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchematwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchematwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchematwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchematwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchematwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchematwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchematwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchematwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchematwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchematwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfciviltwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fciviltwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfciviltwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fciviltwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfciviltwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fciviltwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfciviltwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fciviltwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfciviltwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fciviltwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncfcsebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asyncfcsebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asyncfmechatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautotwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautotwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautotwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautotwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautotwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautotwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautotwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautotwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautotwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautotwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsciviltwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sciviltwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsciviltwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sciviltwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsciviltwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sciviltwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsciviltwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sciviltwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsciviltwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sciviltwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asyncschematwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schematwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschematwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schematwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschematwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schematwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschematwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schematwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschematwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schematwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncsmechatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncsmechatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncsmechbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asynctautotwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautotwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautotwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautotwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautotwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautotwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautotwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautotwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautotwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautotwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctbiotechtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctbiotechtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asynctbiotechtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asynctbiotechtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctbiotechtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchematwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchematwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchematwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchematwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchematwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchematwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchematwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchematwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchematwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchematwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctciviltwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tciviltwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctciviltwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tciviltwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctciviltwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tciviltwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctciviltwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tciviltwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctciviltwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tciviltwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautotwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautotwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautotwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautotwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautotwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautotwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautotwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautotwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncfrautotwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautotwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncfrbiotechtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchematwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchematwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchematwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchematwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchematwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchematwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchematwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchematwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchematwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchematwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrciviltwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frciviltwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrciviltwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frciviltwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrciviltwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frciviltwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrciviltwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frciviltwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrciviltwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frciviltwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }










    //odd sem for second,third and final yr


    public class Asyncsautoonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautoonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautoonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautoonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautoonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautoonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautoonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautoonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautoonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautoonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asyncscivilonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scivilonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscivilonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scivilonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscivilonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scivilonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscivilonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scivilonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscivilonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scivilonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asyncschemaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schemaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschemaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schemaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschemaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schemaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschemaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schemaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschemaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schemaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseconemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseconemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseconetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseconetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfscseconewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseconewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseconethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseconethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseconefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseconefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsececonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sececonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsececonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sececonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsececonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseconewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsececonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sececonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsececonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sececonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncsmechaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncsmechbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautoonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautoonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautoonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautoonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautoonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautoonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautoonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautoonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asynctautoonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautoonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asynctbiotechonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctbiotechonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctbiotechonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctbiotechonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctbiotechonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchemaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchemaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchemaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchemaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchemaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchemaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchemaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchemaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchemaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchemaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcivilonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tciviltwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcivilonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcivilonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcivilonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcivilonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcivilonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcivilonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcivilonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcivilonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseconemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseconemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseconetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseconetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseconewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseconewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseconethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseconethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseconefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseconefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctececonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tececonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctececonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tececonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctececonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tececonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctececonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tececonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctececonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tececonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautoonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautoonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautoonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautoonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautoonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautoonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautoonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautoonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautoonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautoonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asyncfrbiotechonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchemaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchemaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchemaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchemaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchemaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchemaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchemaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchemaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchemaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchemaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcivilonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcivilonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcivilonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcivilonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcivilonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcivilonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcivilonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcivilonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcivilonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcivilonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseconemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseconemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseconetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseconetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseconewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseconewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseconethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseconethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseconefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseconefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrececonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frececonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrececonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frececonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrececonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frececonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrececonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frececonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrececonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frececonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

}































































































































































































